<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0xc0de</title>
  
  <subtitle>Blog by Frank Chang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://0xc0de.tw/"/>
  <updated>2020-05-19T14:38:51.496Z</updated>
  <id>https://0xc0de.tw/</id>
  
  <author>
    <name>Frank Chang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>QEMU: 使用 Decodetree 新增 RISC-V 指令</title>
    <link href="https://0xc0de.tw/QEMU-%E4%BD%BF%E7%94%A8-Decodetree-%E6%96%B0%E5%A2%9E-RISC-V-%E6%8C%87%E4%BB%A4/"/>
    <id>https://0xc0de.tw/QEMU-%E4%BD%BF%E7%94%A8-Decodetree-%E6%96%B0%E5%A2%9E-RISC-V-%E6%8C%87%E4%BB%A4/</id>
    <published>2020-02-16T09:30:00.000Z</published>
    <updated>2020-05-19T14:38:51.496Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><blockquote><p>&#x26A0;&#xFE0F; &#x672C;&#x6587;&#x6240;&#x4F7F;&#x7528;&#x7684; QEMU &#x7248;&#x672C;&#x70BA;&#xFF1A;<code>v4.2.0</code></p></blockquote><p>&#x5728;&#x4E4B;&#x524D;&#x7684;&#x6587;&#x7AE0;&#x4E2D; (<a href="/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-1">Part 1.</a>, <a href="/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-2">Part 2.</a>) &#x6211;&#x5011;&#x63D0;&#x5230;&#x4E86;&#x5982;&#x4F55;&#x4F7F;&#x7528; <code>Decodetree</code> &#x4F86;&#x5B9A;&#x7FA9;&#x6307;&#x4EE4;&#x7684; decoder&#x3002;&#x672C;&#x7BC7;&#x6587;&#x7AE0;&#x5C31;&#x5BE6;&#x969B;&#x4F7F;&#x7528; <code>Decodetree</code> &#x4F86;&#x5B9A;&#x7FA9;&#x4E00;&#x500B; QEMU RISC-V &#x76EE;&#x524D;&#x5C1A;&#x672A;&#x652F;&#x63F4;&#x7684;&#x6307;&#x4EE4; - <code>B(itmanip) Extension</code> &#x4E2D;&#x7684; <code>pcnt</code> &#x6307;&#x4EE4;&#xFF0C;&#x4E26;&#x5BE6;&#x505A;&#x5176;&#x884C;&#x70BA;&#x3002;</p><a id="more"></a><hr><h1 id="pcnt-&#x6307;&#x4EE4;"><a class="header-anchor" href="#pcnt-&#x6307;&#x4EE4;"></a>pcnt &#x6307;&#x4EE4;</h1><p><code>pcnt</code> &#x6307;&#x4EE4;&#x7684;&#x5B9A;&#x7FA9;&#x5982;&#x4E0B;&#xFF1A;</p><blockquote><p>This instruction counts the number of 1 bits in a register. This operations is known as population<br>count, popcount, sideways sum, bit summation, or Hamming weight.</p></blockquote><p>&#x5176;&#x6307;&#x4EE4;&#x683C;&#x5F0F;&#x70BA;&#xFF1A;</p><pre><code>| 1 0 9 8 7 6 5 | 4 3 2 1 0 | 9 8 7 6 5 | 4 3 2 | 1 0 9 8 7 | 6 5 4 3 2 1 0 ||===========================================================================||    0110000    |   00010   |    rs1    |  001  |     rd    |    0010011    | PCNT</code></pre><hr><h1 id="&#x5B89;&#x88DD;-toolchain"><a class="header-anchor" href="#&#x5B89;&#x88DD;-toolchain"></a>&#x5B89;&#x88DD; toolchain</h1><p>&#x7531;&#x65BC; <code>B Extension</code> &#x5C1A;&#x672A;&#x6B63;&#x5F0F;&#x5B9A;&#x7A3F; (Draft)&#xFF0C;&#x56E0;&#x6B64;&#x5FC5;&#x9808;&#x81F3; <a href="https://github.com/riscv/riscv-bitmanip/tree/master/tools" target="_blank" rel="noopener">riscv-bitmanip repo</a> &#x4E0B;&#x8F09; toolchain&#xFF0C;&#x4E26;&#x4F9D;&#x7167;&#x8A72; repo &#x7684;&#x6307;&#x793A;&#x5B89;&#x88DD;&#xFF1A;</p><pre><code>sudo mkdir /opt/riscv64bsudo chown $USER: /opt/riscv64bbash build-all.sh</code></pre><p>&#x6B64;&#x5B89;&#x88DD;&#x9664;&#x4E86; toolchain &#x5916;&#xFF0C;&#x9084;&#x6703;&#x5B89;&#x88DD;&#x652F;&#x63F4; <code>B Extension</code> &#x7684; <code>Spike (riscv-isa-sim)</code> &#x53CA; <code>riscv-pk</code> (P.S. &#x76EE;&#x524D;&#x7684; script &#x662F;&#x5BEB;&#x6B7B;&#x5B89;&#x88DD;&#x8DEF;&#x5F91;&#x70BA;&#xFF1A;<code>/opt/riscv64b</code>)&#x3002;</p><hr><h1 id="&#x7BC4;&#x4F8B;&#x7A0B;&#x5F0F;"><a class="header-anchor" href="#&#x7BC4;&#x4F8B;&#x7A0B;&#x5F0F;"></a>&#x7BC4;&#x4F8B;&#x7A0B;&#x5F0F;</h1><p>&#x5728;&#x5B89;&#x88DD;&#x597D;&#x5F8C;&#xFF0C;&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x5BEB;&#x4E00;&#x500B;&#x7BC4;&#x4F8B;&#x7A0B;&#x5F0F;&#xFF0C;&#x4E26;&#x642D;&#x914D; Spike &#x4F86;&#x505A;&#x6E2C;&#x8A66;&#xFF1A;</p><p></p><figure class="highlight c hljs"><figcaption><span>pcnt_example.c</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> &amp;lt;stdio.h&amp;gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">count_set_bits</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    <span class="hljs-keyword">int</span> count;</span><br><span class="line">    __asm__(<span class="hljs-string">&quot;pcnt %0, %1\n&quot;</span></span><br><span class="line">            : <span class="hljs-string">&quot;=r&quot;</span>(count)</span><br><span class="line">            : <span class="hljs-string">&quot;r&quot;</span>(num)</span><br><span class="line">            :);</span><br><span class="line">    <span class="hljs-keyword">return</span> count;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    <span class="hljs-keyword">int</span> num = <span class="hljs-number">187</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> result = count_set_bits(num);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num = %d\n&quot;</span>, num);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;# of set bits = %d\n&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x6B64;&#x7BC4;&#x4F8B;&#x7A0B;&#x5F0F;&#x505A;&#x7684;&#x4E8B;&#x60C5;&#x5F88;&#x7C21;&#x55AE;&#xFF0C;&#x900F;&#x904E; inline assembly&#xFF1A;<code>pcnt</code> &#x6307;&#x4EE4;&#xFF0C;&#x5C07; <code>int num = 187</code> &#x7684; <code>1 bits</code> &#x500B;&#x6578;&#x7D66;&#x8A08;&#x7B97;&#x51FA;&#x4F86;&#x3002;</p><p>&#x900F;&#x904E;&#x525B;&#x525B;&#x7684; toolchain &#x7DE8;&#x8B6F;&#x6B64;&#x7A0B;&#x5F0F;&#xFF1A;</p><pre><code>/opt/riscv64b/bin/riscv64-unknown-elf-gcc -Wall -march=rv64gb -Os -o pcnt_example pcnt_example.c</code></pre><ul><li>-march=rv64gb&#xFF1A;&#x6307;&#x5B9A; target ISA &#x70BA; <code>RISC-V 64-bit</code> + <code>g (IMAFD base)</code> + <code>b (B Extension)</code>&#x3002;</li></ul><p>&#x900F;&#x904E; objdump &#x89C0;&#x770B;&#x5176;&#x53CD;&#x7D44;&#x8B6F;&#x78BC;&#xFF1A;</p><pre><code>/opt/riscv64b/bin/riscv64-unknown-elf-objdump -S pcnt_example &gt; pcnt_example.s</code></pre><p></p><figure class="highlight plain hljs"><figcaption><span>pcnt_example.s</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pcnt_example:     file format elf64-littleriscv</span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000000100b0 &lt; main &gt;:</span><br><span class="line">   100b0:       00017537                lui     a0,0x17</span><br><span class="line">   100b4:       ff010113                addi    sp,sp,-16</span><br><span class="line">   100b8:       0bb00593                li      a1,187</span><br><span class="line">   100bc:       8b850513                addi    a0,a0,-1864 # 168b8 &lt;__trunctfdf2+0x2ce&gt;</span><br><span class="line">   100c0:       00113423                sd      ra,8(sp)</span><br><span class="line">   100c4:       00813023                sd      s0,0(sp)</span><br><span class="line">   100c8:       2ac000ef                jal     ra,10374 &lt;printf&gt;</span><br><span class="line">   100cc:       0bb00413                li      s0,187</span><br><span class="line">   100d0:       00017537                lui     a0,0x17</span><br><span class="line">   100d4:       60241413                pcnt    s0,s0</span><br><span class="line">   100d8:       0004041b                sext.w  s0,s0</span><br><span class="line">   100dc:       00040593                mv      a1,s0</span><br><span class="line">   100e0:       8c850513                addi    a0,a0,-1848 # 168c8 &lt;__trunctfdf2+0x2de&gt;</span><br><span class="line">   100e4:       290000ef                jal     ra,10374 &lt;printf&gt;</span><br><span class="line">   100e8:       00813083                ld      ra,8(sp)</span><br><span class="line">   100ec:       00013403                ld      s0,0(sp)</span><br><span class="line">   100f0:       00000513                li      a0,0</span><br><span class="line">   100f4:       01010113                addi    sp,sp,16</span><br><span class="line">   100f8:       00008067                ret</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x53EF;&#x4EE5;&#x770B;&#x5230; <code>Line:15</code> &#x547C;&#x53EB;&#x4E86; <code>pcnt</code> &#x6307;&#x4EE4;&#xFF1A;<code>pcnt s0, s0</code>&#x3002;</p><p>&#x900F;&#x904E; Spike &#x57F7;&#x884C;&#x7A0B;&#x5F0F;&#xFF1A;</p><pre><code>/opt/riscv64b/bin/spike --isa=RV64GCB pk pcnt_example</code></pre><pre><code>bbl loadernum = 187# of set bits = 6</code></pre><p><code>187</code> &#x7684;&#x4E8C;&#x9032;&#x4F4D;&#x70BA; <code>10111011</code>&#xFF0C;<code>1 bits</code> &#x500B;&#x6578;&#x70BA; <code>6</code>&#xFF0C;&#x8207;&#x7A0B;&#x5F0F;&#x8F38;&#x51FA;&#x7684;&#x7D50;&#x679C;&#x4E00;&#x81F4;&#x3002;</p><p>&#x540C;&#x6A23;&#x7684;&#x7A0B;&#x5F0F;&#xFF0C;&#x6211;&#x5011;&#x4F7F;&#x7528; QEMU &#x4F86;&#x57F7;&#x884C;&#xFF1A;</p><pre><code>./qemu/riscv64-linux-user/qemu-riscv64 pcnt_example</code></pre><pre><code>num = 187Illegal instruction</code></pre><p>&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x76EE;&#x524D; QEMU &#x5C1A;&#x672A;&#x652F;&#x63F4; <code>pcnt</code> &#x6307;&#x4EE4;&#xFF0C;&#x56E0;&#x6B64;&#x7576;&#x57F7;&#x884C;&#x5230; <code>pcnt</code> &#x6307;&#x4EE4;&#x6642;&#xFF0C;&#x4FBF;&#x6703;&#x5674; <code>Illegal instruction</code> &#x7684;&#x932F;&#x8AA4;&#x8A0A;&#x606F;&#x3002;</p><hr><h1 id="&#x5728;-QEMU-&#x4E2D;&#x65B0;&#x589E;-pcnt-&#x6307;&#x4EE4;"><a class="header-anchor" href="#&#x5728;-QEMU-&#x4E2D;&#x65B0;&#x589E;-pcnt-&#x6307;&#x4EE4;"></a>&#x5728; QEMU &#x4E2D;&#x65B0;&#x589E; pcnt &#x6307;&#x4EE4;</h1><p>&#x6839;&#x64DA;&#x524D;&#x8FF0; <code>B Extension</code> spec. &#x6240;&#x5217;&#x7684; <code>pcnt</code> &#x6307;&#x4EE4;&#x683C;&#x5F0F;&#xFF0C;&#x53C3;&#x8003;&#x76EE;&#x524D; QEMU RISC-V &#x73FE;&#x6709;&#x7684; <code>Decodetree</code>&#xFF1A;<code>target/riscv/insn32.decode</code>&#xFF0C;<code>pcnt</code> &#x7684; <code>Pattern</code> &#x53EF;&#x4EE5;&#x642D;&#x914D; <code>@r2</code> &#x7684; <code>Format</code> (&#x53EA;&#x6709; <code>rs1</code> &#x53CA; <code>rd</code> &#x9019;&#x5169;&#x500B; <code>Fields</code>)&#xFF0C;&#x5176;&#x5B8C;&#x6574;&#x5B9A;&#x7FA9;&#x5982;&#x4E0B;&#xFF1A;</p><h3 id="Field"><a class="header-anchor" href="#Field"></a>Field</h3><figure class="highlight plain hljs"><figcaption><span>./target/riscv/insn32.decode</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">%rs1       15:5</span><br><span class="line">%rd        7:5</span><br></pre></td></tr></tbody></table></figure><h3 id="Format"><a class="header-anchor" href="#Format"></a>Format</h3><figure class="highlight plain hljs"><figcaption><span>./target/riscv/insn32.decode</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">@r2      .......   ..... ..... ... ..... ....... %rs1 %rd</span><br></pre></td></tr></tbody></table></figure><h3 id="Pattern"><a class="header-anchor" href="#Pattern"></a>Pattern</h3><p>&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x5B9A;&#x7FA9; <code>pcnt</code> &#x7684; <code>Pattern</code> &#x5982;&#x4E0B;&#xFF1A;</p><figure class="highlight plain hljs"><figcaption><span>./target/riscv/insn32.decode</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"># *** RV32B Standard Extension ***</span><br><span class="line">pcnt       0110000  00010 ..... 001 ..... 0010011 @r2</span><br></pre></td></tr></tbody></table></figure><p>&#x6240;&#x6703;&#x7522;&#x751F;&#x7684; decoder &#x5982;&#x4E0B;&#xFF1A;</p><figure class="highlight c hljs"><figcaption><span>./riscv64-linux-user/target/riscv/decode_insn32.inc.c</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> {</span></span><br><span class="line">    <span class="hljs-keyword">int</span> rd;</span><br><span class="line">    <span class="hljs-keyword">int</span> rs1;</span><br><span class="line">} arg_decode_insn3213;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c hljs"><figcaption><span>./riscv64-linux-user/target/riscv/decode_insn32.inc.c</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decode_insn32_extract_r2</span><span class="hljs-params">(DisasContext *ctx, arg_decode_insn3213 *a, <span class="hljs-keyword">uint32_t</span> insn)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    a-&gt;rs1 = extract32(insn, <span class="hljs-number">15</span>, <span class="hljs-number">5</span>);</span><br><span class="line">    a-&gt;rd = extract32(insn, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight hljs"><figcaption><span>./riscv64-linux-user/target/riscv/decode_insn32.inc.c</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;</span><br><span class="line">            <span class="hljs-keyword">case</span> <span class="hljs-number">0x1</span>:</span><br><span class="line">                <span class="hljs-comment">/* 01...... ........ .001.... .0010011 */</span></span><br><span class="line">                decode_insn32_extract_r2(ctx, &amp;u.f_decode_insn3213, insn);</span><br><span class="line">                <span class="hljs-keyword">switch</span> ((insn &gt;&gt; <span class="hljs-number">20</span>) &amp; <span class="hljs-number">0x3ff</span>) {</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-number">0x202</span>:</span><br><span class="line">                    <span class="hljs-comment">/* 01100000 0010.... .001.... .0010011 */</span></span><br><span class="line">                    <span class="hljs-comment">/* /home/frankchang/qemu/target/riscv/insn32.decode:208 */</span></span><br><span class="line">                    <span class="hljs-keyword">if</span> (trans_pcnt(ctx, &amp;u.f_decode_insn3213)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">&lt;/pre&gt;</span><br></pre></td></tr></tbody></table></figure><p>&#x7531;&#x65BC; <code>@r2 Format</code> &#x4E26;&#x6C92;&#x6709;&#x53C3;&#x8003;&#x4EFB;&#x4F55;&#x7684; <code>Argument Set</code>&#xFF0C;&#x56E0;&#x6B64; <code>Decodetree</code> &#x6703;&#x81EA;&#x52D5;&#x6839;&#x64DA; <code>Format</code> &#x6240;&#x53C3;&#x8003;&#x5230;&#x7684; <code>Fields</code> (<code>rs1</code>&#x3001;<code>rd</code>) &#x52D5;&#x614B;&#x7522;&#x751F; <code>argument set struct</code>: <code>arg_decode_insn3213</code>&#x3002;</p><p>&#x6B64;&#x5916;&#xFF0C;&#x7531; <code>pcnt Pattern</code> &#x6240;&#x7522;&#x751F;&#x7684; decode function &#x6703;&#x547C;&#x53EB; <code>decode_insn32_extract_r2()</code> &#x9019;&#x500B; extract function &#x4F86;&#x89E3;&#x6790;&#x6307;&#x4EE4;&#x4E2D; <code>rs2</code> &#x53CA; <code>rd</code> &#x6B04;&#x4F4D;&#x7684;&#x503C;&#xFF0C;&#x4E26;&#x66F4;&#x65B0;&#x6240;&#x50B3;&#x5165; <code>arg_decode_insn3213</code> &#x5C0D;&#x61C9;&#x7684;&#x6B04;&#x4F4D;&#xFF0C;&#x800C;&#x5F8C;&#x518D;&#x547C;&#x53EB; <code>trans_pcnt()</code> &#x4F86;&#x57F7;&#x884C; <code>pcnt</code> &#x6307;&#x4EE4; (&#x7522;&#x751F;&#x5C0D;&#x61C9;&#x7684; <code>TCG ops</code>)&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x6211;&#x5011;&#x9084;&#x5FC5;&#x9808;&#x5B9A;&#x7FA9; <code>trans_pcnt()</code> &#x4F86;&#x5BE6;&#x4F5C; <code>pcnt</code> &#x7684;&#x6307;&#x4EE4;&#x884C;&#x70BA;&#x3002;</p><hr><p>&#x53C3;&#x8003; <code>B Extension</code> spec. &#x4E2D;&#xFF0C;<code>pcnt</code> &#x6307;&#x4EE4;&#x7684;&#x5BE6;&#x4F5C;&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">uint_xlen_t</span> <span class="hljs-title">pcnt</span><span class="hljs-params">(<span class="hljs-keyword">uint_xlen_t</span> rs1)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; XLEN; index++)</span><br><span class="line">    count += (rs1 &gt;&gt; index) &amp; <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> count;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x53CA; Spike &#x4E2D;&#xFF0C;<code>pcnt</code> &#x6307;&#x4EE4;&#x7684;&#x5BE6;&#x4F5C;&#xFF1A;</p><p></p><figure class="highlight c hljs"><figcaption><span>riscv-isa-sim/riscv/insns/pcnt.h </span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">require_extension(<span class="hljs-string">&apos;B&apos;</span>);</span><br><span class="line"><span class="hljs-keyword">reg_t</span> x = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; xlen; i++)</span><br><span class="line">  <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> &amp; (RS1 &gt;&gt; i)) x++;</span><br><span class="line">WRITE_RD(sext_xlen(x));</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x5BE6;&#x4F5C;&#x5F88;&#x7C21;&#x55AE;&#xFF0C;&#x6BCF;&#x6B21;&#x8FF4;&#x5708; right shift <code>rs1</code> <code>i</code> &#x500B; bits &#x4E26;&#x8207; <code>1</code> &#x505A; <code>AND</code>&#xFF0C;&#x82E5;&#x70BA; <code>true</code> &#x5C31;&#x5C07; <code>count</code> &#x52A0; <code>1</code>&#xFF0C;&#x6700;&#x5F8C;&#x56DE;&#x50B3;&#x7684; <code>count</code> &#x5C31;&#x662F; <code>1 bits</code> &#x500B;&#x6578;&#x3002;</p><hr><p><code>trans_pcnt()</code> &#x5BE6;&#x4F5C;&#x4E86; <code>pcnt</code> &#x6307;&#x4EE4;&#x5C0D;&#x61C9;&#x7684; <code>TCG ops</code>&#x3002;QEMU &#x5728;&#x57F7;&#x884C;&#x6642;&#xFF0C;&#x6703;&#x5C07; <code>target instructions</code> (e.g. RISC-V instructions) &#x8F49;&#x8B6F;&#x6210; <code>TCG ops</code>&#xFF0C;&#x800C; <code>TCG ops</code> &#x5247;&#x6703;&#x518D;&#x8F49;&#x8B6F;&#x70BA; <code>host instructions</code> (e.g. x86 instruction)&#x3002;</p><figure class="highlight plain hljs"><figcaption><span>QEMU dynamic instructions translation</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">+---------------------+      +---------+      +-------------------+</span><br><span class="line">| Target Instructions | ---&gt; | TCG ops | ---&gt; | Host instructions |</span><br><span class="line">+---------------------+      +---------+      +-------------------+</span><br><span class="line">     (e.g. RISC-V)                                  (e.g. x86)</span><br></pre></td></tr></tbody></table></figure><p>&#x95DC;&#x65BC; <code>TCG</code> &#x7684;&#x8AAA;&#x660E;&#xFF0C;&#x53EF;&#x4EE5;&#x53C3;&#x8003; QEMU &#x7684; documentations&#xFF1A;<a href="https://github.com/qemu/qemu/blob/master/docs/devel/tcg.rst" target="_blank" rel="noopener">Translator Internals</a>&#x3001;<a href="https://github.com/qemu/qemu/blob/master/tcg/README" target="_blank" rel="noopener">TCG README</a>&#x3002;</p><p>&#x65B0;&#x589E;&#x4E00;&#x6A94;&#x6848;&#xFF1A;<code>./target/riscv/insn_trans/trans_rvb.inc.c</code> &#x4F86;&#x5B9A;&#x7FA9; <code>B Extension</code> &#x6307;&#x4EE4;&#x7684;&#x5BE6;&#x4F5C; (&#x7576;&#x7136;&#xFF0C;&#x76EE;&#x524D;&#x53EA;&#x6709; <code>pcnt</code> &#x6307;&#x4EE4;)&#xFF1A;</p><p></p><figure class="highlight c hljs"><figcaption><span>./target/riscv/insn_trans/trans_rvb.inc.c</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"> * RISC-V translation routines for the RVB Standard Extension.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">trans_pcnt</span><span class="hljs-params">(DisasContext *ctx, arg_pcnt *a)</span> </span>{</span><br><span class="line">    <span class="hljs-keyword">if</span> (a-&gt;rd != <span class="hljs-number">0</span>) {</span><br><span class="line">        TCGv t0 = tcg_temp_new();</span><br><span class="line">        gen_get_gpr(t0, a-&gt;rs1);</span><br><span class="line">        gen_helper_pcnt(cpu_gpr[a-&gt;rd], t0);</span><br><span class="line">        tcg_temp_free(t0);</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x7531;&#x65BC;&#x5C0D; <code>x0</code> (<code>zero register</code>) &#x7684;&#x5BEB;&#x5165;&#x90FD;&#x6703;&#x88AB;&#x5FFD;&#x7565;&#xFF0C;&#x56E0;&#x6B64;&#x9996;&#x5148;&#x5224;&#x65B7; <code>rd</code> &#x662F;&#x5426;&#x70BA; <code>0</code>&#xFF0C;&#x82E5;&#x70BA; <code>0</code> &#x5247;&#x4E0D;&#x505A;&#x4EFB;&#x4F55;&#x7684;&#x4E8B;&#x60C5;&#x3002;</p><p>&#x518D;&#x4F86;&#x5BA3;&#x544A;&#x4E00; TCG variable&#xFF1A;<code>t0</code>&#xFF0C;&#x4E26;&#x900F;&#x904E; <code>gen_get_gpr()</code> &#x5C07; <code>rs1</code> &#x66AB;&#x5B58;&#x5668;&#x7684;&#x503C; (&#x5982; <code>pcnt_example</code> &#x4E2D; <code>pcnt s0, s0</code> &#x6307;&#x4EE4;&#xFF0C;<code>rs1</code> &#x5373;&#x70BA; <code>s0</code>&#xFF0C;&#x4E5F;&#x5C31;&#x662F; <code>x8</code>)&#xFF0C;&#x8F09;&#x5165;&#x5230; <code>t0</code>&#x3002;</p><p>&#x9019;&#x908A;&#x9084;&#x547C;&#x53EB;&#x4E86;&#x6211;&#x5011;&#x6240;&#x5B9A;&#x7FA9;&#x5E6B;&#x6211;&#x5011;&#x8655;&#x7406; <code>pcnt</code> &#x8A08;&#x7B97; <code>1 bits</code> &#x500B;&#x6578;&#x7684; <code>pcnt</code> helper function&#xFF1A;<code>gen_helper_pcnt()</code>&#x3002;&#x8A72; helper function &#x6703;&#x5728;&#x8A08;&#x7B97;&#x5B8C;&#x5F8C;&#xFF0C;&#x5C07;&#x6700;&#x5F8C;&#x7684;&#x7D50;&#x679C;&#x5B58;&#x81F3; <code>rd</code> (i.e. <code>cpu_gpr[a-&gt;rd]</code>) &#x66AB;&#x5B58;&#x5668;&#x4E2D;&#x3002;</p><p>&#x6700;&#x5F8C;&#x5225;&#x5FD8;&#x4E86;&#x8981;&#x91CB;&#x653E;&#x4E4B;&#x524D;&#x6240;&#x5BA3;&#x544A;&#x7684; TCG variable&#xFF1A;<code>t0</code>&#x3002;</p><p>P.S. &#x5176;&#x5BE6;&#x9019;&#x908A;&#x53EF;&#x4EE5;&#x66F4;&#x7C21;&#x55AE;&#x7684;&#x76F4;&#x63A5;&#x5C07; <code>cpu_gpr[a-&gt;rs1]</code> &#x50B3;&#x5165;&#xFF0C;&#x7701;&#x7565; TCG variable&#xFF1A;<code>t0</code> &#x7684;&#x5BA3;&#x544A;&#xFF1A;</p><p></p><figure class="highlight c hljs"><figcaption><span>./target/riscv/insn_trans/trans_rvb.inc.c</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"> * RISC-V translation routines for the RVB Standard Extension.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">trans_pcnt</span><span class="hljs-params">(DisasContext *ctx, arg_pcnt *a)</span> </span>{</span><br><span class="line">    <span class="hljs-keyword">if</span> (a-&gt;rd != <span class="hljs-number">0</span>) {</span><br><span class="line">        gen_helper_pcnt(cpu_gpr[a-&gt;rd], cpu_gpr[a-&gt;rs1]);</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>pcnt</code> &#x7684; helper function &#x5B9A;&#x7FA9;&#x5982;&#x4E0B;&#xFF1A;</p><p></p><figure class="highlight c hljs"><figcaption><span>./target/riscv/helper.h</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* Bitmanip Extension */</span></span><br><span class="line">DEF_HELPER_1(pcnt, tl, tl)</span><br></pre></td></tr></tbody></table></figure><p></p><p></p><figure class="highlight c hljs"><figcaption><span>./target/riscv/bitmanip_helper.c</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"> * RISC-V Bitmanip Extension Helpers for QEMU.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;qemu/osdep.h&quot;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;cpu.h&quot;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;exec/exec-all.h&quot;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;exec/helper-proto.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function">target_ulong <span class="hljs-title">HELPER</span><span class="hljs-params">(pcnt)</span><span class="hljs-params">(target_ulong rs1)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    target_ulong count = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; TARGET_LONG_BITS; i++) {</span><br><span class="line">        count += (rs1 &gt;&gt; i) &amp; <span class="hljs-number">1</span>;;</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> count;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x57FA;&#x672C;&#x4E0A;&#x5C31;&#x662F;&#x5BE6;&#x4F5C;&#x5148;&#x524D;&#x5728; <code>B Extension</code> spec. &#x53CA; Spike &#x4E2D;&#x6240;&#x770B;&#x5230;&#x7684; <code>1 bits</code> &#x500B;&#x6578;&#x8A08;&#x7B97;&#x65B9;&#x5F0F;&#x3002;&#x7531;&#x65BC; <code>pcnt</code> helper function &#x53EA;&#x9700;&#x63A5;&#x6536; <code>rs1</code> &#x66AB;&#x5B58;&#x5668;&#x7684;&#x503C;&#xFF0C;&#x4E26;&#x56DE;&#x50B3;&#x6700;&#x5F8C; <code>1 bits</code> &#x500B;&#x6578;&#x7684;&#x7D50;&#x679C;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x6211;&#x5011;&#x5B9A;&#x7FA9; <code>pcnt</code> &#x7684; helper function &#x70BA;&#x63A5;&#x6536;&#x4E00; <code>target_ulong</code> &#x578B;&#x614B;&#x7684; <code>rs1</code> &#x4E26;&#x56DE;&#x50B3; <code>target_ulong</code> &#x578B;&#x614B;&#x7684; <code>1 bits</code> &#x500B;&#x6578;&#x7D50;&#x679C;&#x3002;</p><p>&#x6700;&#x5F8C;&#x5225;&#x5FD8;&#x4E86;&#x5C07;&#x6211;&#x5011;&#x65B0;&#x589E;&#x7684; <code>bitmanip_helper.o</code> &#x52A0;&#x5165; compile objects &#x5217;&#x8868;&#xFF1A;</p><p></p><figure class="highlight plain hljs"><figcaption><span>./target/riscv/Makefile.objs</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj-y += translate.o op_helper.o cpu_helper.o cpu.o csr.o fpu_helper.o bitmanip_helper.o gdbstub.o</span><br></pre></td></tr></tbody></table></figure><p></p><hr><p>&#x91CD;&#x65B0;&#x7DE8;&#x8B6F; QEMU&#xFF0C;&#x518D;&#x6B21;&#x57F7;&#x884C; <code>pcnt_example</code>&#xFF1A;</p><pre><code>./qemu/riscv64-linux-user/qemu-riscv64 pcnt_example</code></pre><pre><code>num = 187# of set bits = 6</code></pre><p>&#x9019;&#x6B21; QEMU &#x5C31;&#x53EF;&#x4EE5;&#x6B63;&#x78BA;&#x7684; decode &#x4E26;&#x57F7;&#x884C; <code>pcnt</code> &#x6307;&#x4EE4;&#x4E86;&#x3002;</p><hr><p>&#x5728; QEMU &#x4E2D;&#x65B0;&#x589E;&#x6307;&#x4EE4;&#x7684;&#x6D41;&#x7A0B;&#x5927;&#x81F4;&#x5C31;&#x5982;&#x540C;&#x672C;&#x6587;&#x6240;&#x4ECB;&#x7D39;&#xFF0C;&#x4E0D;&#x904E;&#x7531;&#x65BC; <code>pcnt</code> &#x6307;&#x4EE4;&#x53EA;&#x662F;&#x55AE;&#x7D14;&#x7684; bit operation &#x6307;&#x4EE4;&#xFF0C;&#x6C92;&#x6709;&#x50CF; <code>csr</code> &#x76F8;&#x95DC;&#x6307;&#x4EE4;&#x6703;&#x6D89;&#x53CA; <code>CPURISCVState</code> &#x7684;&#x66F4;&#x65B0;&#xFF0C;&#x4EE5;&#x53CA;&#x50CF; <code>jal</code> &#x6307;&#x4EE4;&#x6703;&#x6D89;&#x53CA; <code>DisasContext</code> &#x7684;&#x5224;&#x65B7;&#xFF0C;&#x56E0;&#x6B64;&#x5BE6;&#x4F5C;&#x8D77;&#x4F86;&#x76F8;&#x5C0D;&#x7C21;&#x55AE;&#x3002;&#x82E5;&#x6B32;&#x8B93; QEMU &#x652F;&#x63F4;&#x4E0D;&#x8AD6;&#x662F; <code>B Extension</code> &#x6216;&#x662F; <code>V Extension</code> &#x7684;&#x5176;&#x4ED6;&#x6307;&#x4EE4;&#xFF0C;&#x5C31;&#x662F;&#x5F97;&#x597D;&#x597D; K spec. &#x4E26;&#x4E00;&#x500B;&#x4E00;&#x500B;&#x65B0;&#x589E;&#x4E86;&#x3002;</p><p>&#x53E6;&#x5916;&#x6700;&#x8FD1;&#x525B;&#x597D; C-Sky Microsystems &#x7684; <code>LIU Zhiwei &amp;lt;zhiwei_liu@c-sky.com&amp;gt;</code> &#x5728;&#x5BE6;&#x4F5C; <code>V Extension</code> &#x7684; configure instructions&#xFF1A;<code>vsetvl</code> &#x53CA; <code>vsetvli</code>&#xFF0C;&#x6BD4;&#x8D77;&#x672C;&#x6587;&#x6240;&#x4ECB;&#x7D39;&#x4E4B; <code>B Extension</code> &#x7684; <code>pcnt</code> &#x6307;&#x4EE4;&#x8981;&#x4F86;&#x5F97;&#x8907;&#x96DC;&#x5F97;&#x591A;&#xFF0C;<a href="https://github.com/patchew-project/qemu/commit/04f8d9c87bf88fabd1221f8758187ba1fa5628f0" target="_blank" rel="noopener">patches</a> &#x4ECD;&#x5728;&#x88AB; reviewed &#x4E2D;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x505A;&#x70BA;&#x53C3;&#x8003;&#x3002;</p><p>&#x672C;&#x6587;&#x6240;&#x5C0D; QEMU &#x505A;&#x7684;&#x4FEE;&#x6B63;&#xFF0C;&#x53EF;&#x4EE5;&#x53C3;&#x8003;&#x6B64; <a href="https://github.com/frankchang0125/qemu/commit/3ca50fb830ab3f2b9a1b806e2240ea5bff9dfabf" target="_blank" rel="noopener">commit</a>&#x3002;</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;#x26A0;&amp;#xFE0F; &amp;#x672C;&amp;#x6587;&amp;#x6240;&amp;#x4F7F;&amp;#x7528;&amp;#x7684; QEMU &amp;#x7248;&amp;#x672C;&amp;#x70BA;&amp;#xFF1A;&lt;code&gt;v4.2.0&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;#x5728;&amp;#x4E4B;&amp;#x524D;&amp;#x7684;&amp;#x6587;&amp;#x7AE0;&amp;#x4E2D; (&lt;a href=&quot;/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-1&quot;&gt;Part 1.&lt;/a&gt;, &lt;a href=&quot;/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-2&quot;&gt;Part 2.&lt;/a&gt;) &amp;#x6211;&amp;#x5011;&amp;#x63D0;&amp;#x5230;&amp;#x4E86;&amp;#x5982;&amp;#x4F55;&amp;#x4F7F;&amp;#x7528; &lt;code&gt;Decodetree&lt;/code&gt; &amp;#x4F86;&amp;#x5B9A;&amp;#x7FA9;&amp;#x6307;&amp;#x4EE4;&amp;#x7684; decoder&amp;#x3002;&amp;#x672C;&amp;#x7BC7;&amp;#x6587;&amp;#x7AE0;&amp;#x5C31;&amp;#x5BE6;&amp;#x969B;&amp;#x4F7F;&amp;#x7528; &lt;code&gt;Decodetree&lt;/code&gt; &amp;#x4F86;&amp;#x5B9A;&amp;#x7FA9;&amp;#x4E00;&amp;#x500B; QEMU RISC-V &amp;#x76EE;&amp;#x524D;&amp;#x5C1A;&amp;#x672A;&amp;#x652F;&amp;#x63F4;&amp;#x7684;&amp;#x6307;&amp;#x4EE4; - &lt;code&gt;B(itmanip) Extension&lt;/code&gt; &amp;#x4E2D;&amp;#x7684; &lt;code&gt;pcnt&lt;/code&gt; &amp;#x6307;&amp;#x4EE4;&amp;#xFF0C;&amp;#x4E26;&amp;#x5BE6;&amp;#x505A;&amp;#x5176;&amp;#x884C;&amp;#x70BA;&amp;#x3002;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="QEMU" scheme="https://0xc0de.tw/categories/QEMU/"/>
    
      <category term="RISC-V" scheme="https://0xc0de.tw/categories/QEMU/RISC-V/"/>
    
    
      <category term="QEMU" scheme="https://0xc0de.tw/tags/QEMU/"/>
    
      <category term="RISC-V" scheme="https://0xc0de.tw/tags/RISC-V/"/>
    
  </entry>
  
  <entry>
    <title>QEMU Decodetree 語法介紹 (Part 2.)</title>
    <link href="https://0xc0de.tw/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-2/"/>
    <id>https://0xc0de.tw/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-2/</id>
    <published>2020-02-01T06:57:43.000Z</published>
    <updated>2020-05-19T14:38:51.488Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><blockquote><p>&#x26A0;&#xFE0F; &#x672C;&#x6587;&#x6240;&#x4F7F;&#x7528;&#x7684; QEMU &#x7248;&#x672C;&#x70BA;&#xFF1A;<code>v4.2.0</code></p></blockquote><p>&#x5EF6;&#x7E8C; <a href="/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-1/" title="Part 1.">Part 1.</a> &#x4E00;&#x6587;&#xFF0C;&#x672C;&#x6587;&#x5C07;&#x7E7C;&#x7E8C;&#x4ECB;&#x7D39; <code>Decodetree</code> &#x4E2D;&#x7684; <code>Patterns</code> &#x53CA; <code>Pattern Groups</code> &#x8A9E;&#x6CD5;&#x3002;</p><a id="more"></a><hr><h1 id="Patterns"><a class="header-anchor" href="#Patterns"></a>Patterns</h1><p><code>Pattern</code> &#x5BE6;&#x969B;&#x5B9A;&#x7FA9;&#x4E86;&#x4E00;&#x500B;&#x6307;&#x4EE4;&#x7684; decode &#x65B9;&#x5F0F;&#x3002;<code>Decodetree</code> &#x6703;&#x6839;&#x64DA; <code>Patterns</code> &#x7684;&#x5B9A;&#x7FA9;&#xFF0C;&#x4F86;&#x52D5;&#x614B;&#x7522;&#x751F;&#x51FA;&#x5C0D;&#x61C9;&#x7684; <code>switch-case</code> decode &#x5224;&#x65B7;&#x5F0F;&#x3002;</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pat_def      := identifier ( pat_elt )+</span><br><span class="line">pat_elt      := fixedbit_elt | field_elt | field_ref | args_ref | fmt_ref | const_elt</span><br><span class="line">fmt_ref      := &apos;@&apos; identifier</span><br><span class="line">const_elt    := identifier &apos;=&apos; number</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x5176;&#x8A9E;&#x6CD5;&#x7531;&#x4F7F;&#x7528;&#x8005;&#x6240;&#x5B9A;&#x7FA9;&#x7684; <code>identifier</code>&#xFF0C;&#x96A8;&#x5F8C;&#x7DCA;&#x63A5;&#x8457;&#x4E00;&#x500B;&#x4EE5;&#x4E0A;&#x7684; <code>pat_elt</code>&#x3002;</p><ul><li><code>identifier</code> &#x53EF;&#x7531;&#x958B;&#x767C;&#x8005;&#x81EA;&#x8A02;&#xFF0C;&#x5982;&#xFF1A;<code>addl_r</code>&#x3001;<code>addli</code> &#x2026; &#x7B49;&#x3002;</li><li><code>pat_elt</code> &#x5247;&#x53EF;&#x4EE5;&#x63A1;&#x7528;&#x4EE5;&#x4E0B;&#x4E0D;&#x540C;&#x7684;&#x8A9E;&#x6CD5;&#xFF1A;<ul><li><code>fixedbit_elt</code> &#x8207;&#x5728; <code>Format</code> &#x4E2D; <code>fixedbit_elt</code> &#x7684;&#x5B9A;&#x7FA9;&#x76F8;&#x540C;&#x3002;</li><li><code>field_elt</code> &#x8207;&#x5728; <code>Format</code> &#x4E2D; <code>field_elt</code> &#x7684;&#x5B9A;&#x7FA9;&#x76F8;&#x540C;&#x3002;</li><li><code>field_ref</code> &#x8207;&#x5728; <code>Format</code> &#x4E2D; <code>field_ref</code> &#x7684;&#x5B9A;&#x7FA9;&#x76F8;&#x540C;&#x3002;</li><li><code>args_ref</code> &#x8207;&#x5728; <code>Format</code> &#x4E2D; <code>args_ref</code> &#x7684;&#x5B9A;&#x7FA9;&#x76F8;&#x540C;&#x3002;</li><li><code>fmt_ref</code> &#x76F4;&#x63A5;&#x53C3;&#x8003;&#x4E00;&#x500B;&#x88AB;&#x5B9A;&#x7FA9;&#x904E;&#x7684; <a href="/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-1/#Formats">Format</a>&#x3002;</li><li><code>const_elt</code> &#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x6307;&#x5B9A;&#x67D0;&#x4E00;&#x500B; <code>argument</code> &#x7684;&#x503C;&#x3002;</li></ul></li></ul><p>&#x7531;&#x65BC; <code>Pattern</code> &#x5BE6;&#x969B;&#x5B9A;&#x7FA9;&#x4E86;&#x4E00;&#x500B;&#x6307;&#x4EE4;&#x7684; decode &#x65B9;&#x5F0F;&#xFF0C;&#x56E0;&#x6B64;<strong>&#x6240;&#x6709;&#x7684; bits</strong> &#x53CA; <strong>arguments (&#x5982;&#x679C;&#x6709;&#x53C3;&#x8003; args_ref &#x7684;&#x8A71;)</strong>  &#x90FD;&#x5FC5;&#x9808;&#x660E;&#x78BA;&#x7684;&#x88AB;&#x5B9A;&#x7FA9;&#xFF0C;&#x5982;&#x679C;&#x5728;&#x642D;&#x914D;&#x4E86;&#x6240;&#x6709;&#x7684; <code>pat_elt</code> &#x5F8C;&#x9084;&#x6709;&#x672A;&#x5B9A;&#x7FA9;&#x7684; bits &#x6216;&#x662F; arguments &#x7684;&#x8A71;&#xFF0C;<code>Decodetree</code> &#x4FBF;&#x6703;&#x5831;&#x932F;&#x3002;</p><p>&#x6B64;&#x5916;&#xFF0C;<code>Pattern</code> &#x6240;&#x7522;&#x751F;&#x51FA;&#x4F86;&#x7684; decoder&#xFF0C;&#x6700;&#x5F8C;&#x9084;&#x6703;&#x547C;&#x53EB;&#x5C0D;&#x61C9;&#x7684; <code>translator function</code>&#x3002;</p><ul><li><code>translator function</code> &#x9700;&#x958B;&#x767C;&#x8005;&#x81EA;&#x884C;&#x5B9A;&#x7FA9;&#x3002;</li></ul><h3 id="Examples"><a class="header-anchor" href="#Examples"></a>Examples</h3><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addl_i   010000 ..... ..... .... 0000000 ..... @opi</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x5B9A;&#x7FA9;&#x4E86; <code>addl_i</code> &#x9019;&#x500B;&#x6307;&#x4EE4;&#x7684; <code>Pattern</code>&#xFF0C;&#x5176;&#x4E2D;&#xFF1A;</p><ul><li>insn[31:26] &#x70BA; <code>010000</code>&#x3002;</li><li>insn[11:5] &#x70BA; <code>0000000</code>&#x3002;</li><li>&#x53C3;&#x8003;&#x4E86; <a href="/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-1/#Examples-3">Part 1. Examples</a> &#x5B9A;&#x7FA9;&#x7684; <code>@opi</code> <code>Format</code>&#x3002;</li><li>&#x7531;&#x65BC; <code>Pattern</code> &#x7684;<strong>&#x6240;&#x6709; bits</strong> &#x90FD;&#x5FC5;&#x9808;&#x660E;&#x78BA;&#x7684;&#x88AB;&#x5B9A;&#x7FA9;&#xFF0C;&#x56E0;&#x6B64; <code>@opi</code> &#x5FC5;&#x9808;&#x5305;&#x542B;&#x5176;&#x9918; <code>insn[25:12]</code> &#x53CA; <code>insn[4:0]</code> &#x7684;&#x683C;&#x5F0F;&#x5B9A;&#x7FA9;&#xFF0C;&#x5426;&#x5247; <code>Decodetree</code> &#x4FBF;&#x6703;&#x5831;&#x932F;&#x3002;</li></ul><p>&#x6700;&#x5F8C; <code>addl_i</code> &#x7684; decoder &#x9084;&#x6703;&#x547C;&#x53EB; <code>trans_addl_i()</code> &#x9019;&#x500B; <code>translator function</code>&#x3002;</p><p>&#x642D;&#x914D;&#x4E4B;&#x524D;&#x4ECB;&#x7D39;&#x7684; <a href="/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-1/#Fields">Fields</a>&#x3001;<a href="/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-1/#Argument-Sets">Argument Sets</a> &#x53CA; <a href="/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-1/#Formats">Formats</a>&#xFF0C;&#x8B93;&#x6211;&#x5011;&#x518D;&#x770B;&#x5E7E;&#x500B;&#x5B8C;&#x6574;&#x7684;&#x4F8B;&#x5B50;&#x61C9;&#x8A72;&#x6703;&#x66F4;&#x6E05;&#x695A; <code>Decodetree</code> &#x662F;&#x600E;&#x7522;&#x751F;&#x4E00;&#x500B;&#x6307;&#x4EE4;&#x7684; decoder &#x7684;&#x3002;</p><hr><p>&#x9996;&#x5148;&#x662F; RISC-V &#x7684; <code>lui</code> &#x53CA; <code>auipc</code> &#x6307;&#x4EE4;&#xFF1A;</p><img src="/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-2/lui_auipc.png" class title="LUI &amp; AUIPC instruction formats"><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Fields:</span><br><span class="line">%rd        7:5</span><br><span class="line"></span><br><span class="line"># immediates:</span><br><span class="line">%imm_u    12:s20                 !function=ex_shift_12</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Argument sets:</span><br><span class="line">&amp;u    imm rd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Formats:</span><br><span class="line">@u       ....................      ..... ....... &amp;u      imm=%imm_u          %rd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Patterns</span><br><span class="line">lui      ....................       ..... 0110111 @u</span><br><span class="line">auipc    ....................       ..... 0010111 @u</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x6703;&#x7522;&#x751F;&#x4EE5;&#x4E0B; <code>lui</code> &#x53CA; <code>auipc</code> &#x7684; decoder&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> {</span></span><br><span class="line">    <span class="hljs-keyword">int</span> imm;</span><br><span class="line">    <span class="hljs-keyword">int</span> rd;</span><br><span class="line">} arg_u;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decode_insn32_extract_u</span><span class="hljs-params">(DisasContext *ctx, arg_u *a, <span class="hljs-keyword">uint32_t</span> insn)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    a-&gt;imm = ex_shift_12(ctx, sextract32(insn, <span class="hljs-number">12</span>, <span class="hljs-number">20</span>));</span><br><span class="line">    a-&gt;rd = extract32(insn, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">decode_insn32</span><span class="hljs-params">(DisasContext *ctx, <span class="hljs-keyword">uint32_t</span> insn)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    <span class="hljs-keyword">union</span> {</span><br><span class="line">        arg_u f_u;</span><br><span class="line">    } u;</span><br><span class="line"></span><br><span class="line">    decode_insn32_extract_u(ctx, &amp;u.f_u, insn);</span><br><span class="line">    <span class="hljs-keyword">switch</span> (insn &amp; <span class="hljs-number">0x0000007f</span>) {</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-number">0x00000017</span>:</span><br><span class="line">        <span class="hljs-comment">/* ........ ........ ........ .0010111 */</span></span><br><span class="line">        <span class="hljs-comment">/* ./insn32.decode:18 */</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (trans_auipc(ctx, &amp;u.f_u)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-number">0x00000037</span>:</span><br><span class="line">        <span class="hljs-comment">/* ........ ........ ........ .0110111 */</span></span><br><span class="line">        <span class="hljs-comment">/* ./insn32.decode:17 */</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (trans_lui(ctx, &amp;u.f_u)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x56DE;&#x9867;&#x5230;&#x76EE;&#x524D;&#x70BA;&#x6B62;&#x6240;&#x4ECB;&#x7D39;&#x7684;&#xFF1A;</p><ul><li><p><code>Argument Sets</code>&#xFF1A;<code>&amp;u</code> &#x9019;&#x500B; <code>argument set</code> &#x5305;&#x542B;&#x4E86; <code>imm</code> &#x53CA; <code>rd</code> &#x9019;&#x5169;&#x500B; <code>arguments</code>&#x3002;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> {</span></span><br><span class="line">    <span class="hljs-keyword">int</span> imm;</span><br><span class="line">    <span class="hljs-keyword">int</span> rd;</span><br><span class="line">} arg_u;</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><code>Fields</code>&#xFF1A; <code>imm</code> &#x53CA; <code>rd</code>  &#x5206;&#x5225;&#x4F4D;&#x5728; insn[31:12] &#x53CA; insn[11:7]&#xFF0C;&#x4E14; <code>imm</code> &#x70BA; <code>sign-extended</code>&#x3002;&#x6700;&#x5F8C;&#x5728;&#x64F7;&#x53D6;&#x51FA; <code>imm</code> &#x7684;&#x503C;&#x5F8C;&#xFF0C;&#x9084;&#x6703;&#x547C;&#x53EB; <code>ex_shift_12()</code>&#x3002;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a-&gt;imm = ex_shift_12(ctx, sextract32(insn, <span class="hljs-number">12</span>, <span class="hljs-number">20</span>));</span><br><span class="line">a-&gt;rd = extract32(insn, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>);</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><code>Formats</code>&#xFF1A;<code>@u</code> &#x5B9A;&#x7FA9;&#x4E86; RISC-V <code>U-type</code> &#x6307;&#x4EE4;&#x7684;&#x683C;&#x5F0F;</p><ul><li>&#x53C3;&#x8003;&#x4E86; <code>&amp;u</code> &#x9019;&#x500B; <code>Argument Set</code>&#xFF0C;&#x56E0;&#x6B64; decode function &#x6703;&#x50B3;&#x5165; <code>arg_u</code> &#x4F5C;&#x70BA;&#x53C3;&#x6578;&#x3002;</li><li>insn[31:12] &#x53C3;&#x8003;&#x4E86; <code>imm_u</code> &#x9019;&#x500B; <code>Field</code> (&#x4E26;&#x91CD;&#x65B0;&#x547D;&#x540D;&#x70BA; <code>imm</code>)</li><li>insn[11:7] &#x53C3;&#x8003;&#x4E86; <code>rd</code> &#x9019;&#x500B; <code>Field</code>&#x3002;</li></ul><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decode_insn32_extract_u</span><span class="hljs-params">(DisasContext *ctx, arg_u *a, <span class="hljs-keyword">uint32_t</span> insn)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    a-&gt;imm = ex_shift_12(ctx, sextract32(insn, <span class="hljs-number">12</span>, <span class="hljs-number">20</span>));</span><br><span class="line">    a-&gt;rd = extract32(insn, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p><code>Patterns</code>&#xFF1A;</p><ul><li><code>lui</code> &#x7684; <code>opcode</code> (insn[6:0]) &#x70BA; <code>0010111</code>&#xFF0C;&#x4E5F;&#x5C31;&#x662F; <code>0x17</code>&#xFF0C;&#x5728;&#x7522;&#x751F;&#x51FA;&#x4F86;&#x7684; <code>switch-case</code> &#x4E2D;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x5176;&#x5C0D;&#x61C9;&#x7684; <code>case</code>&#x3002;</li><li><code>lui</code> &#x7684; decoder &#x6700;&#x5F8C;&#x547C;&#x53EB;&#x4E86; <code>trans_lui()</code>&#xFF0C;&#x4E26;&#x50B3;&#x5165; <code>DisasContext</code> &#x53CA;&#x7D93;&#x7531; <code>decode_insn32_extract_u()</code> &#x6240;&#x89E3;&#x6790;&#x51FA;&#x4F86;&#x7684; <code>arg_u</code>&#x3002;</li><li><code>auipc</code> &#x7684; <code>opcode</code> (insn[6:0]) &#x70BA; <code>0110111</code>&#xFF0C;&#x4E5F;&#x5C31;&#x662F; <code>0x37</code>&#xFF0C;&#x5728;&#x7522;&#x751F;&#x51FA;&#x4F86;&#x7684; <code>switch-case</code> &#x4E2D;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x5176;&#x5C0D;&#x61C9;&#x7684; <code>case</code>&#x3002;</li><li><code>auipc</code> &#x7684; decoder &#x6700;&#x5F8C;&#x547C;&#x53EB;&#x4E86; <code>trans_auipc()</code>&#xFF0C;&#x4E26;&#x50B3;&#x5165; <code>DisasContext</code> &#x53CA;&#x7D93;&#x7531; <code>decode_insn32_extract_u()</code> &#x6240;&#x89E3;&#x6790;&#x51FA;&#x4F86;&#x7684; <code>arg_u</code>&#x3002;</li><li>P.S. &#x9019;&#x908A;&#x7531;&#x65BC; <code>Decodetree</code> &#x767C;&#x73FE; <code>lui</code> &#x53CA; <code>auipc</code> &#x53EF;&#x4EE5;&#x5171;&#x7528; <code>decode_insn32_extract_u()</code>&#xFF0C;&#x56E0;&#x6B64;&#x5C07;&#x5176;&#x63D0;&#x5230;&#x4E86; <code>switch-case</code> &#x4E4B;&#x5916;&#x3002;</li></ul><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">decode_insn32</span><span class="hljs-params">(DisasContext *ctx, <span class="hljs-keyword">uint32_t</span> insn)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    <span class="hljs-keyword">union</span> {</span><br><span class="line">        arg_u f_u;</span><br><span class="line">    } u;</span><br><span class="line"></span><br><span class="line">    decode_insn32_extract_u(ctx, &amp;u.f_u, insn);</span><br><span class="line">    <span class="hljs-keyword">switch</span> (insn &amp; <span class="hljs-number">0x0000007f</span>) {</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-number">0x00000017</span>:</span><br><span class="line">        <span class="hljs-comment">/* ........ ........ ........ .0010111 */</span></span><br><span class="line">        <span class="hljs-comment">/* ./insn32.decode:18 */</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (trans_auipc(ctx, &amp;u.f_u)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-number">0x00000037</span>:</span><br><span class="line">        <span class="hljs-comment">/* ........ ........ ........ .0110111 */</span></span><br><span class="line">        <span class="hljs-comment">/* ./insn32.decode:17 */</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (trans_lui(ctx, &amp;u.f_u)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x6211;&#x5011;&#x53E6;&#x5916;&#x53EF;&#x4EE5;&#x767C;&#x73FE;&#xFF0C;<code>Pattern</code> + <code>Format</code> &#x628A;&#x6240;&#x6709;&#x7684; 32-bits &#x90FD;&#x7D66;&#x4E86;&#x660E;&#x78BA;&#x7684;&#x5B9A;&#x7FA9;&#xFF1A;</p><ul><li><code>Pattern</code> &#x5B9A;&#x7FA9;&#x4E86; <code>opcode</code> (insn[6:0])&#x3002;</li><li><code>Format</code> &#x53C3;&#x8003;&#x4E86; <code>imm</code> (insn[31:12]) &#x53CA; <code>rd</code> (insn[11:7])&#x3002;</li></ul><p>&#x5982;&#x679C;&#x6709;&#x4EFB;&#x4F55;&#x672A;&#x660E;&#x78BA;&#x5B9A;&#x7FA9;&#x7684; bits &#x7684;&#x8A71;&#xFF0C;<code>Decodetree</code> &#x4FBF;&#x6703;&#x5831;&#x932F;&#xFF0C;&#x4F8B;&#x5982;&#x5982;&#x679C;&#x6211;&#x5011;&#x5C07; <code>lui</code> &#x7684; <code>opcode</code> &#x6700;&#x9AD8; 2 &#x500B; bits (insn[6:5]) &#x7531; <code>01</code> &#x6539;&#x6210; <code>..</code>&#xFF1A;</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lui      ....................       ..... ..10111 @u</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>Decodetree</code> &#x5728;&#x89E3;&#x6790;&#x6642;&#xFF0C;&#x4FBF;&#x6703;&#x5831;&#x932F;&#xFF1A;</p><blockquote><p>./insn32.decode:17: error: (&#x2018;bits left unspecified (0x00000060)&#x2019;,)</p></blockquote><p><code>Decodetree</code> &#x63D0;&#x9192;&#x6211;&#x5011;&#xFF0C;insn[6:5] (<code>0x00000060</code>) &#x5C1A;&#x672A;&#x7D66;&#x51FA;&#x660E;&#x78BA;&#x5B9A;&#x7FA9;&#xFF0C;&#x4E26;&#x6703;&#x986F;&#x793A;&#x51FA;&#x5176;&#x932F;&#x8AA4;&#x7684;&#x884C;&#x6578;&#x3002;</p><p><code>trans_lui()</code> &#x548C; <code>trans_auipc()</code> &#x88AB;&#x5B9A;&#x7FA9;&#x5728; <code>target/riscv/insn_trans/trans_rvi.inc.c</code>&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">trans_lui</span><span class="hljs-params">(DisasContext *ctx, arg_lui *a)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    <span class="hljs-keyword">if</span> (a-&gt;rd != <span class="hljs-number">0</span>) {</span><br><span class="line">        tcg_gen_movi_tl(cpu_gpr[a-&gt;rd], a-&gt;imm);</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">trans_auipc</span><span class="hljs-params">(DisasContext *ctx, arg_auipc *a)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    <span class="hljs-keyword">if</span> (a-&gt;rd != <span class="hljs-number">0</span>) {</span><br><span class="line">        tcg_gen_movi_tl(cpu_gpr[a-&gt;rd], a-&gt;imm + ctx-&gt;base.pc_next);</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x53EF;&#x4EE5;&#x770B;&#x5230; <code>trans_*()</code> &#x8CA0;&#x8CAC;&#x5BE6;&#x969B;&#x6307;&#x4EE4;&#x7684; business logics &#x53CA;&#x7522;&#x751F;&#x5C0D;&#x61C9;&#x7684; <code>TCG codes</code>&#x3002;</p></li></ul><hr><p>&#x5982;&#x540C;&#x5148;&#x524D;&#x6240;&#x4ECB;&#x7D39;&#xFF0C;<code>Patterns</code> &#x7684; <code>pat_elt</code> &#x4E5F;&#x53EF;&#x4EE5;&#x63A1;&#x7528; <code>field_elt</code> &#x8A9E;&#x6CD5;&#xFF0C;&#x5982; RISC-V &#x7684; <code>fence</code> &#x6307;&#x4EE4;&#xFF1A;</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fence    ---- pred:4 succ:4 ----- 000 ----- 0001111</span><br></pre></td></tr></tbody></table></figure><p></p><ul><li>insn[27:24] &#x70BA; <code>pred</code>&#x3002;</li><li>insn[23:20] &#x70BA; <code>succ</code>&#x3002;</li><li>insn[14:12] &#x56FA;&#x5B9A;&#x70BA; <code>000</code>&#x3002;</li><li>insn[6:0] &#x70BA; <code>opcode</code> (<code>0001111</code>)&#x3002;</li><li>&#x6C92;&#x6709;&#x53C3;&#x8003;&#x4EFB;&#x4F55;&#x7684; <code>Format</code>&#x3002;</li><li>&#x5269;&#x4E0B;&#x7684; insn[31:28]&#x3001;insn[19:15]&#x3001;insn[11:7] &#x88AB;&#x5BA3;&#x544A;&#x70BA; <code>-</code>&#xFF0C;&#x56E0;&#x6B64;&#x5C31;&#x7B97;&#x6C92;&#x6709;&#x88AB;&#x660E;&#x78BA;&#x5B9A;&#x7FA9;&#x4E5F;&#x6C92;&#x6709;&#x95DC;&#x4FC2;&#x3002;</li></ul><p>&#x6240;&#x751F;&#x6210; <code>fence</code> &#x7684; decoder &#x5982;&#x4E0B;&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> {</span></span><br><span class="line">    <span class="hljs-keyword">int</span> pred;</span><br><span class="line">    <span class="hljs-keyword">int</span> succ;</span><br><span class="line">} arg_decode_insn320;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decode_insn32_extract_decode_insn32_Fmt_0</span><span class="hljs-params">(DisasContext *ctx, arg_decode_insn320 *a, <span class="hljs-keyword">uint32_t</span> insn)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    a-&gt;pred = extract32(insn, <span class="hljs-number">24</span>, <span class="hljs-number">4</span>);</span><br><span class="line">    a-&gt;succ = extract32(insn, <span class="hljs-number">20</span>, <span class="hljs-number">4</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">decode_insn32</span><span class="hljs-params">(DisasContext *ctx, <span class="hljs-keyword">uint32_t</span> insn)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    <span class="hljs-keyword">union</span> {</span><br><span class="line">        arg_decode_insn320 f_decode_insn320;</span><br><span class="line">    } u;</span><br><span class="line"></span><br><span class="line">    decode_insn32_extract_decode_insn32_Fmt_0(ctx, &amp;u.f_decode_insn320, insn);</span><br><span class="line">    <span class="hljs-keyword">switch</span> (insn &amp; <span class="hljs-number">0x0000707f</span>) {</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-number">0x0000000f</span>:</span><br><span class="line">        <span class="hljs-comment">/* ........ ........ .000.... .0001111 */</span></span><br><span class="line">        <span class="hljs-comment">/* ./insn32.decode:2 */</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (trans_fence(ctx, &amp;u.f_decode_insn320)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x96D6;&#x7136;&#x9019;&#x6B21;&#x6211;&#x5011;&#x6C92;&#x6709;&#x53C3;&#x8003;&#x4EFB;&#x4F55;&#x7684; <code>Argument Set</code>&#xFF0C;&#x4F46; <code>Decodetree</code> &#x9084;&#x662F;&#x66FF;&#x6211;&#x5011;&#x751F;&#x6210;&#x4E86;&#x4E00;&#x500B;&#x5305;&#x542B; <code>pred</code> &#x548C; <code>succ</code> &#x7684; <code>arg_decode_insn320</code> &#x3002;</p><p><code>trans_fence()</code> &#x540C;&#x6A23;&#x662F;&#x88AB;&#x5B9A;&#x7FA9;&#x5728; <code>./target/riscv/insn_trans/trans_rvi.inc.c</code>&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">trans_fence</span><span class="hljs-params">(DisasContext *ctx, arg_fence *a)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    <span class="hljs-comment">/* FENCE is a full memory barrier. */</span></span><br><span class="line">    tcg_gen_mb(TCG_MO_ALL | TCG_BAR_SC);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><hr><h1 id="Pattern-Groups"><a class="header-anchor" href="#Pattern-Groups"></a>Pattern Groups</h1><p><code>Pattern Groups</code> &#x7531;&#x4E00;&#x500B;&#x4EE5;&#x4E0A;&#x7684; <code>Patterns</code> &#x6240;&#x7D44;&#x6210;&#xFF0C;&#x5176;&#x4E3B;&#x8981;&#x5DEE;&#x5225;&#x662F;&#x4E0D;&#x540C; <code>Patterns</code> &#x4E4B;&#x9593;&#x7684; bits &#x53EF;&#x4EE5; overlap&#x3002;&#x7576;&#x540C;&#x7D44;&#x4E2D;&#x6709;&#x591A;&#x500B; <code>Patterns</code> &#x6642;&#xFF0C;&#x6703;&#x4F9D;&#x64DA;&#x8A72;&#x7D44;&#x4E2D;&#x5404; <code>Pattern</code> &#x7684;&#x5BA3;&#x544A;&#x9806;&#x5E8F;&#x4F9D;&#x5E8F;&#x5224;&#x65B7;&#x76EE;&#x524D;&#x7684;&#x6307;&#x4EE4;&#x662F;&#x5426;&#x7B26;&#x5408;&#x5176;&#x5B9A;&#x7FA9;&#x3002;&#x9664;&#x6B64;&#x4E4B;&#x5916;&#xFF0C;&#x7576;&#x7B26;&#x5408;&#x7684; <code>Pattern</code> &#x5176; <code>trans_*()</code> &#x56DE;&#x50B3;&#x503C;&#x70BA; <code>false</code> &#x6642;&#xFF0C;&#x4E5F;&#x6703;&#x88AB;&#x8996;&#x70BA;<strong>&#x4E0D;&#x76F8;&#x7B26;</strong>&#xFF0C;&#x800C;&#x7E7C;&#x7E8C;&#x5224;&#x65B7;&#x8A72;&#x7D44;&#x4E2D;&#x7684;&#x4E0B;&#x4E00;&#x500B; <code>Pattern</code>&#x3002;&#x56E0;&#x6B64; <code>Pattern Groups</code> &#x975E;&#x5E38;&#x9069;&#x5408;&#x5C07;&#x591A;&#x500B;&#x76F8;&#x4F3C;&#x683C;&#x5F0F;&#x7684;&#x6307;&#x4EE4;&#x7D66;&#x7D44;&#x6210;&#x540C;&#x4E00;&#x500B; <code>Pattern Group</code>&#x3002;</p><p>&#x539F;&#x6587;&#x8AAA;&#x660E;&#x5982;&#x4E0B;&#xFF1A;</p><blockquote><p>Unlike ungrouped patterns, grouped patterns are allowed to overlap. Conflicts are resolved by selecting the patterns in order.  If all of the <code>fixedbits</code> for a pattern match, its translate function will be called.  If the translate function returns <code>false</code>, then subsequent patterns within the group will be matched.</p></blockquote><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group    := &apos;{&apos; ( pat_def | group )+ &apos;}&apos;</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x5404; <code>Pattern Group</code> &#x4EE5; <code>{</code> &#x958B;&#x982D;&#xFF0C;&#x4E26;&#x4EE5; <code>}</code> &#x7D50;&#x5C3E;&#xFF0C;&#x4E14;&#x5141;&#x8A31; <code>nested pattern groups</code> &#x7684;&#x5B58;&#x5728;&#xFF0C;&#x5176;&#x4ED6;&#x8A9E;&#x6CD5;&#x7686;&#x8207; <code>Pattern</code> &#x76F8;&#x540C;&#x3002;</p><h3 id="Examples-2"><a class="header-anchor" href="#Examples-2"></a>Examples</h3><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  {</span><br><span class="line">    nop   000010 ----- ----- 0000 001001 0 00000</span><br><span class="line">    copy  000010 00000 r1:5  0000 001001 0 rt:5</span><br><span class="line">  }</span><br><span class="line">  or      000010 rt2:5 r1:5  cf:4 001001 0 rt:5</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x6703;&#x7522;&#x751F;&#x4EE5;&#x4E0B;&#x7684; decoder&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">switch</span> (insn &amp; <span class="hljs-number">0xfc000fe0</span>) {</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">0x08000240</span>:</span><br><span class="line">    <span class="hljs-comment">/* 000010.. ........ ....0010 010..... */</span></span><br><span class="line">    <span class="hljs-keyword">if</span> ((insn &amp; <span class="hljs-number">0x0000f000</span>) == <span class="hljs-number">0x00000000</span>) {</span><br><span class="line">        <span class="hljs-comment">/* 000010.. ........ 00000010 010..... */</span></span><br><span class="line">        <span class="hljs-keyword">if</span> ((insn &amp; <span class="hljs-number">0x0000001f</span>) == <span class="hljs-number">0x00000000</span>) {</span><br><span class="line">            <span class="hljs-comment">/* 000010.. ........ 00000010 01000000 */</span></span><br><span class="line">            extract_decode_Fmt_0(&amp;u.f_decode0, insn);</span><br><span class="line">            <span class="hljs-keyword">if</span> (trans_nop(ctx, &amp;u.f_decode0)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line"><span class="hljs-comment">// &#x9019;&#x908A;&#x6C92;&#x6709;&#x76F4;&#x63A5;&#x56DE;&#x50B3; false&#xFF0C;&#x8B93; switch-case &#x7E7C;&#x7E8C;&#x5F80;&#x4E0B;&#x57F7;&#x884C;</span></span><br><span class="line">      }</span><br><span class="line">      <span class="hljs-keyword">if</span> ((insn &amp; <span class="hljs-number">0x03e00000</span>) == <span class="hljs-number">0x00000000</span>) {</span><br><span class="line">          <span class="hljs-comment">/* 00001000 000..... 00000010 010..... */</span></span><br><span class="line">          extract_decode_Fmt_1(&amp;u.f_decode1, insn);</span><br><span class="line">          <span class="hljs-keyword">if</span> (trans_copy(ctx, &amp;u.f_decode1)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">&#x3000;<span class="hljs-comment">// &#x9019;&#x908A;&#x6C92;&#x6709;&#x76F4;&#x63A5;&#x56DE;&#x50B3; false&#xFF0C;&#x8B93; switch-case &#x7E7C;&#x7E8C;&#x5F80;&#x4E0B;&#x57F7;&#x884C;</span></span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">  extract_decode_Fmt_2(&amp;u.f_decode2, insn);</span><br><span class="line">  <span class="hljs-keyword">if</span> (trans_or(ctx, &amp;u.f_decode2)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x7576;&#x6307;&#x4EE4;&#x7684;&#x503C;&#x7B26;&#x5408; <code>nop</code> &#x53CA; <code>copy</code> &#x9019;&#x500B;&#x5167;&#x5C64; <code>Pattern Group</code> &#x6642;&#xFF0C;&#x6703;&#x5148;&#x5224;&#x65B7;&#x8A72;&#x6307;&#x4EE4;&#x662F;&#x5426;&#x7B26;&#x5408; <code>nop</code> &#x6307;&#x4EE4;&#x7684;&#x5B9A;&#x7FA9;&#xFF0C;&#x4E14; <code>trans_nop()</code> &#x7684;&#x56DE;&#x50B3;&#x503C;&#x70BA; <code>true</code>&#x3002;&#x5426;&#x5247;&#x7684;&#x8A71;&#xFF0C;&#x5C31;&#x6703;&#x7E7C;&#x7E8C;&#x5224;&#x65B7;&#x662F;&#x5426;&#x7B26;&#x5408;&#x540C;&#x7D44;&#x4E2D;&#x7684; <code>copy</code> &#x6307;&#x4EE4;&#x3002;&#x82E5;&#x90FD;&#x4E0D;&#x7B26;&#xFF0C;&#x5C31;&#x6703;&#x518D;&#x5224;&#x65B7;&#x662F;&#x5426;&#x7B26;&#x5408;&#x5916;&#x5C64; <code>Pattern Group</code> &#x7684; <code>or</code> &#x6307;&#x4EE4;&#x3002;&#x82E5;&#x4ECD;&#x4E0D;&#x7B26;&#xFF0C;&#x624D;&#x6703;&#x56DE;&#x50B3; <code>false</code> &#x8868;&#x793A; decode &#x5931;&#x6557;&#x3002;</p><p>&#x8207;&#x55AE;&#x7D14;&#x4F7F;&#x7528; <code>Pattern</code> &#x6700;&#x5927;&#x4E0D;&#x540C;&#x7684;&#x662F;&#xFF0C;&#x7576;&#x4E00; <code>Pattern</code> &#x7684; <code>trans_*()</code> &#x56DE;&#x50B3;&#x503C;&#x70BA; <code>false</code> &#x6642;&#xFF0C;&#x4E0D;&#x6703;&#x76F4;&#x63A5;&#x56DE;&#x50B3; <code>false</code> (&#x4EE3;&#x8868; decode &#x5931;&#x6557;)&#xFF0C;&#x800C;&#x662F;&#x6703;&#x63A5;&#x7E8C;&#x8457;&#x5224;&#x65B7;&#x5F8C;&#x7E8C;&#x7684; <code>Patterns</code> &#x662F;&#x5426;&#x76F8;&#x7B26;&#x3002;</p><hr><p>RISC-V Compressed-Extension &#x4E2D;&#x7684; <code>c.ebreak</code>&#x3001;<code>c.jalr</code>&#x3001;&#x53CA; <code>c.add</code> &#x6307;&#x4EE4;&#xFF0C;&#x7531;&#x65BC;&#x9019;&#x4E09;&#x500B;&#x6307;&#x4EE4;&#x7684;&#x683C;&#x5F0F;&#x975E;&#x5E38;&#x76F8;&#x4F3C;&#xFF0C;&#x56E0;&#x6B64;&#x975E;&#x5E38;&#x9069;&#x5408;&#x4F7F;&#x7528; <code>Pattern Group</code> &#x4F86;&#x5B9A;&#x7FA9;&#xFF1A;</p><img src="/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-2/risc_v_c_insn.png" class title="RISC-V Compressed-Extension instruction formats"><p>RISC-V spec. &#x4E2D;&#x5B9A;&#x7FA9;&#xFF1A;</p><p><code>C.EBREAK</code> shares the <code>opcode</code> with the <code>C.ADD</code> instruction, but with <code>rd</code> and <code>rs2</code> both <code>zero</code>, thus can also use the <code>CR</code> format.</p><p><code>C.JALR</code> is only valid when <code>rs1&#x2260;x0</code>; the code point with <code>rs1=x0</code> corresponds to the <code>C.EBREAK</code> instruction.</p><p><code>C.ADD</code> is only valid when <code>rs2&#x2260;x0</code>; the code points with <code>rs2=x0</code> correspond to the <code>C.JALR</code> and <code>C.EBREAK</code> instructions. The code points with <code>rs2&#x338;=x0</code> and <code>rd=x0</code> are <code>HINTs</code>.</p><p><code>c.ebreak</code>&#x3001;<code>c.jalr</code>&#x3001;<code>c.add</code> &#x4E09;&#x500B;&#x6307;&#x4EE4;&#xFF1A;</p><ul><li>insn[15:13]&#x3001;insn[12]&#x3001;insn[1:0] &#x7684;&#x503C;&#x7686;&#x76F8;&#x540C;&#x3002;</li><li>&#x7576; insn[11:7] &#x4E14; insn[6:2] &#x7684;&#x503C;&#x7686;&#x70BA; <code>0</code> (<code>rs1=0</code> &#x4E14; <code>rs2=0</code>) &#x6642;&#x70BA; <code>c.ebreak</code> &#x6307;&#x4EE4;&#x3002;</li><li>&#x7576;&#x53EA;&#x6709; insn[11:7] &#x7684;&#x503C;&#x70BA; <code>0</code> (<code>rs1=0</code> &#x4E14; <code>rs2&#x2260;0</code>) &#x6642;&#x70BA; <code>c.jalr</code> &#x6307;&#x4EE4;&#x3002;</li><li>&#x5426;&#x5247;&#x70BA; <code>c.add</code> &#x6307;&#x4EE4; (<code>rs1&#x2260;x0</code> &#x4E14; <code>rs2&#x2260;0</code>)&#x3002;</li></ul><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Fields</span><br><span class="line">%rd        7:5</span><br><span class="line">%rs2_5     2:5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Argument Sets</span><br><span class="line">&amp;r         rd rs1 rs2   !extern</span><br><span class="line">&amp;i         imm rs1 rd   !extern</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Formats</span><br><span class="line">@cr        ....  ..... .....  .. &amp;r      rs2=%rs2_5       rs1=%rd     %rd</span><br><span class="line">@c_jalr    ... . .....  ..... .. &amp;i      imm=0 rs1=%rd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Pattern Groups</span><br><span class="line">{</span><br><span class="line">  ebreak          100 1  00000  00000 10</span><br><span class="line">  jalr            100 1  .....  00000 10 @c_jalr rd=1  # C.JALR</span><br><span class="line">  add             100 1  .....  ..... 10 @cr</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x6240;&#x751F;&#x6210;&#x7684; decoder &#x5982;&#x4E0B;&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decode_insn16_extract_c_jalr</span><span class="hljs-params">(DisasContext *ctx, arg_i *a, <span class="hljs-keyword">uint16_t</span> insn)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    a-&gt;imm = <span class="hljs-number">0</span>; <span class="hljs-comment">// &#x5728; c_jalr &#x7684; Format &#x4E2D;&#x6307;&#x5B9A; imm &#x7684;&#x503C;&#x70BA; 0</span></span><br><span class="line">    a-&gt;rs1 = extract32(insn, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decode_insn16_extract_cr</span><span class="hljs-params">(DisasContext *ctx, arg_r *a, <span class="hljs-keyword">uint16_t</span> insn)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    a-&gt;rs2 = extract32(insn, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>);</span><br><span class="line">    a-&gt;rs1 = extract32(insn, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>);</span><br><span class="line">    a-&gt;rd = extract32(insn, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decode_insn16_extract_decode_insn16_Fmt_2</span><span class="hljs-params">(DisasContext *ctx, arg_decode_insn162 *a, <span class="hljs-keyword">uint16_t</span> insn)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">decode_insn16</span><span class="hljs-params">(DisasContext *ctx, <span class="hljs-keyword">uint16_t</span> insn)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    <span class="hljs-keyword">union</span> {</span><br><span class="line">        arg_decode_insn162 f_decode_insn162;</span><br><span class="line">        arg_i f_i;</span><br><span class="line">        arg_r f_r;</span><br><span class="line">    } u;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">switch</span> (insn &amp; <span class="hljs-number">0x0000f003</span>) {</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-number">0x00009002</span>:</span><br><span class="line">        <span class="hljs-comment">/* 1001.... ......10 */</span></span><br><span class="line">        <span class="hljs-keyword">if</span> ((insn &amp; <span class="hljs-number">0x00000ffc</span>) == <span class="hljs-number">0x00000000</span>) {</span><br><span class="line">            <span class="hljs-comment">/* 10010000 00000010 */</span></span><br><span class="line">            <span class="hljs-comment">/* ./insn16.decode:20 */</span></span><br><span class="line">            decode_insn16_extract_decode_insn16_Fmt_2(ctx, &amp;u.f_decode_insn162, insn);</span><br><span class="line">            <span class="hljs-keyword">if</span> (trans_ebreak(ctx, &amp;u.f_decode_insn162)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">            <span class="hljs-comment">// &#x9019;&#x908A;&#x6C92;&#x6709;&#x76F4;&#x63A5;&#x56DE;&#x50B3; false&#xFF0C;&#x8B93; switch-case &#x7E7C;&#x7E8C;&#x5F80;&#x4E0B;&#x57F7;&#x884C;</span></span><br><span class="line">        }</span><br><span class="line">        <span class="hljs-keyword">if</span> ((insn &amp; <span class="hljs-number">0x0000007c</span>) == <span class="hljs-number">0x00000000</span>) {</span><br><span class="line">            <span class="hljs-comment">/* 1001.... .0000010 */</span></span><br><span class="line">            <span class="hljs-comment">/* ./insn16.decode:21 */</span></span><br><span class="line">            decode_insn16_extract_c_jalr(ctx, &amp;u.f_i, insn);</span><br><span class="line">            u.f_i.rd = <span class="hljs-number">1</span>; <span class="hljs-comment">// &#x5728; jalr &#x7684; Pattern &#x4E2D;&#x6307;&#x5B9A; rd &#x7684;&#x503C;&#x70BA; 0&#x3002;</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (trans_jalr(ctx, &amp;u.f_i)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">            <span class="hljs-comment">// &#x9019;&#x908A;&#x6C92;&#x6709;&#x76F4;&#x63A5;&#x56DE;&#x50B3; false&#xFF0C;&#x8B93; switch-case &#x7E7C;&#x7E8C;&#x5F80;&#x4E0B;&#x57F7;&#x884C;</span></span><br><span class="line">        }</span><br><span class="line">        <span class="hljs-comment">/* ./insn16.decode:22 */</span></span><br><span class="line">        decode_insn16_extract_cr(ctx, &amp;u.f_r, insn);</span><br><span class="line">        <span class="hljs-keyword">if</span> (trans_add(ctx, &amp;u.f_r)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x7576;&#x6307;&#x4EE4;&#x683C;&#x5F0F;&#x7B26;&#x5408; <code>c.ebreak</code>&#x3001;<code>c.jalr</code>&#x3001;<code>c.add</code> &#x7684; <code>Pattern Group</code> &#x6642;&#xFF0C;&#x6703;&#x4F9D;&#x5E8F;&#x5224;&#x65B7;&#x8A72;&#x6307;&#x4EE4;&#x662F;&#x5426;&#x7B26;&#x5408; <code>c.ebreak</code>&#x3001;<code>c.jalr</code>&#x3001;<code>c.add</code> &#x7684;&#x5B9A;&#x7FA9;&#x4EE5;&#x53CA;&#x5176;&#x5C0D;&#x61C9;&#x7684; <code>trans_*()</code>&#x3002;</p><p>&#x53E6;&#x5916;&#x503C;&#x5F97;&#x4E00;&#x63D0;&#x7684;&#x662F;&#xFF0C;&#x5728; <code>c_jalr</code> <code>Format</code> &#x548C; <code>jalr</code> <code>Pattern</code> &#x4E2D;&#x6709;&#x5206;&#x5225;&#x6307;&#x5B9A;&#x5176; <code>imm</code> &#x53CA; <code>rd</code> &#x7684;&#x503C;&#x70BA; <code>0</code>&#xFF0C;&#x6240;&#x751F;&#x6210;&#x7684; codes &#x4E5F;&#x6703;&#x5206;&#x5225;&#x5728;&#x5C0D;&#x61C9;&#x7684;&#x5730;&#x65B9;&#x5C07;&#x8A72;&#x503C;&#x8A2D;&#x70BA; <code>0</code> (&#x898B; codes &#x8A3B;&#x89E3;&#x8AAA;&#x660E;)&#x3002;</p><hr><p>&#x4EE5;&#x4E0A;&#x5C31;&#x662F; <code>Decodetree</code> &#x7684;&#x8A9E;&#x6CD5;&#x8AAA;&#x660E;&#x3002;&#x900F;&#x904E; <code>Decodetree</code>&#xFF0C;&#x6211;&#x5011;&#x4E0D;&#x7528;&#x518D;&#x50CF;&#x4EE5;&#x524D;&#x4EE5;&#x6A23;&#x5BEB;&#x4E00;&#x5927;&#x5305;&#x7684; <code>switch-case</code> &#x4F86; decode &#x6307;&#x4EE4;&#x3002;&#x5C07;&#x4E0D;&#x540C;&#x985E;&#x578B;&#x7684;&#x6307;&#x4EE4;&#x5BEB;&#x81F3;&#x4E0D;&#x540C;&#x7684; decode &#x6A94;&#xFF0C;&#x4E0D;&#x50C5;&#x65B9;&#x4FBF;&#x7DAD;&#x8B77;&#xFF0C;&#x95B1;&#x8B80;&#x8D77;&#x4F86;&#x4E5F;&#x66F4;&#x70BA;&#x5BB9;&#x6613;&#x3002;</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;#x26A0;&amp;#xFE0F; &amp;#x672C;&amp;#x6587;&amp;#x6240;&amp;#x4F7F;&amp;#x7528;&amp;#x7684; QEMU &amp;#x7248;&amp;#x672C;&amp;#x70BA;&amp;#xFF1A;&lt;code&gt;v4.2.0&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;#x5EF6;&amp;#x7E8C; &lt;a href=&quot;/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-1/&quot; title=&quot;Part 1.&quot;&gt;Part 1.&lt;/a&gt; &amp;#x4E00;&amp;#x6587;&amp;#xFF0C;&amp;#x672C;&amp;#x6587;&amp;#x5C07;&amp;#x7E7C;&amp;#x7E8C;&amp;#x4ECB;&amp;#x7D39; &lt;code&gt;Decodetree&lt;/code&gt; &amp;#x4E2D;&amp;#x7684; &lt;code&gt;Patterns&lt;/code&gt; &amp;#x53CA; &lt;code&gt;Pattern Groups&lt;/code&gt; &amp;#x8A9E;&amp;#x6CD5;&amp;#x3002;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="QEMU" scheme="https://0xc0de.tw/categories/QEMU/"/>
    
      <category term="RISC-V" scheme="https://0xc0de.tw/categories/QEMU/RISC-V/"/>
    
    
      <category term="QEMU" scheme="https://0xc0de.tw/tags/QEMU/"/>
    
      <category term="RISC-V" scheme="https://0xc0de.tw/tags/RISC-V/"/>
    
  </entry>
  
  <entry>
    <title>QEMU Decodetree 語法介紹 (Part 1.)</title>
    <link href="https://0xc0de.tw/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-1/"/>
    <id>https://0xc0de.tw/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-1/</id>
    <published>2020-01-31T13:53:40.000Z</published>
    <updated>2020-05-19T14:46:39.261Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><blockquote><p>&#x26A0;&#xFE0F; &#x672C;&#x6587;&#x6240;&#x4F7F;&#x7528;&#x7684; QEMU &#x7248;&#x672C;&#x70BA;&#xFF1A;<code>v4.2.0</code></p></blockquote><p>QEMU &#x5728; decode &#x6307;&#x4EE4;&#x7684;&#x6642;&#x5019;&#xFF0C;&#x9700;&#x8981;&#x547C;&#x53EB;&#x5404;&#x5E73;&#x53F0;&#x6240;&#x5B9A;&#x7FA9;&#x7684; instruction decoders &#x4F86;&#x89E3;&#x6790;&#x6307;&#x4EE4;&#x3002;&#x5982;&#x5728; ARM &#x5E73;&#x53F0;&#x4E0B;&#xFF0C;&#x5C31;&#x5B9A;&#x7FA9;&#x4E86;&#xFF1A;<code>disas_arm_insn()</code>&#x3001;<code>disas_thumb_insn()</code> &#x53CA; <code>disas_thumb2_insn()</code> &#x7B49;&#x4F86;&#x5206;&#x5225;&#x8CA0;&#x8CAC; ARM 32-bits &#x6307;&#x4EE4;&#x3001;ARM Thumb &#x6307;&#x4EE4;&#x53CA; ARM Thumb2 &#x6307;&#x4EE4;&#x7684;&#x89E3;&#x6790;&#x3002;</p><p>&#x800C; <code>Decodetree</code> &#x5247;&#x662F;&#x7531; <code>Bastian Koppelmann</code> &#x65BC; 2017 &#x5E74;&#x5728; porting RISC-V QEMU &#x7684;&#x6642;&#x5019;&#x6240;&#x63D0;&#x51FA;&#x4F86;&#x7684;&#x6A5F;&#x5236; (&#x8A73;&#x898B;&#xFF1A;<a href="https://lists.gnu.org/archive/html/qemu-devel/2017-07/msg07735.html" target="_blank" rel="noopener">&#x8A0E;&#x8AD6;&#x4E32; 1</a>&#x3001;<a href="https://lists.gnu.org/archive/html/qemu-devel/2017-10/msg05046.html" target="_blank" rel="noopener">&#x8A0E;&#x8AD6;&#x4E32; 2</a>)&#x3002;&#x4E3B;&#x56E0;&#x662F;&#x904E;&#x5F80;&#x7684; instruction decoders (&#x5982;&#xFF1A;ARM) &#x90FD;&#x662F;&#x63A1;&#x7528;&#x4E00;&#x5927;&#x5305;&#x7684; <code>switch-case</code> &#x4F86;&#x505A;&#x5224;&#x65B7;&#x3002;&#x4E0D;&#x50C5;&#x96E3;&#x95B1;&#x8B80;&#xFF0C;&#x4E5F;&#x96E3;&#x4EE5;&#x7DAD;&#x8B77;&#x3002;</p><p>&#x56E0;&#x6B64; <code>Bastian Koppelmann</code> &#x5C31;&#x63D0;&#x51FA;&#x4E86; <code>Decodetree</code> &#x7684;&#x6A5F;&#x5236;&#xFF0C;&#x958B;&#x767C;&#x8005;&#x53EA;&#x9700;&#x8981;&#x900F;&#x904E; <code>Decodetree</code> &#x7684;&#x8A9E;&#x6CD5;&#x5B9A;&#x7FA9;&#x5404;&#x500B;&#x6307;&#x4EE4;&#x7684;&#x683C;&#x5F0F;&#xFF0C;&#x4FBF;&#x53EF;&#x4EA4;&#x7531; <code>Decodetree</code> &#x4F86;&#x52D5;&#x614B;&#x751F;&#x6210;&#x5C0D;&#x61C9;&#x5305;&#x542B; <code>switch-case</code> &#x7684; instruction decoder <code>.c</code> &#x6A94;&#x3002;</p><a id="more"></a><p><code>Decodetree</code> &#x7279;&#x5225;&#x9069;&#x5408;&#x50CF; RISC-V &#x9019;&#x7A2E;&#x5177;&#x6709;<strong>&#x56FA;&#x5B9A;&#x6307;&#x4EE4;&#x683C;&#x5F0F;</strong>&#x7684; ISA[^1]&#x3002;</p><ul><li>&#x56E0;&#x70BA;&#x5404;&#x6B04;&#x4F4D;&#x90FD;&#x5728;&#x56FA;&#x5B9A;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;(&#x5982; RISC-V &#x7684; <code>opcode</code> &#x90FD;&#x662F;&#x56FA;&#x5B9A;&#x5728; <code>bits[6..0]</code> &#x7684;&#x4F4D;&#x7F6E;)&#xFF0C;&#x5404;&#x6307;&#x4EE4;&#x53EF;&#x91CD;&#x8907;&#x4F7F;&#x7528;&#x7684;&#x5B9A;&#x7FA9;&#x76F8;&#x8F03;&#x65BC;&#x5176;&#x4ED6;&#x7684; ISA &#x4F86;&#x5F97;&#x591A;&#x3002;</li></ul><img src="/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-1/riscv_insn_format.png" class title="RISC-V instruction formats"><p><code>Decodetree</code> &#x5176;&#x5BE6;&#x662F;&#x7531; Python script (<code>./scripts/decodetree.py</code>) &#x6240;&#x64B0;&#x5BEB;&#x7684;&#x3002;&#x5176;&#x898F;&#x683C;&#x8AAA;&#x660E;&#x6587;&#x4EF6;&#x53EF;&#x4EE5;&#x53C3;&#x8003;&#xFF1A;<code>./docs/devel/decodetree.rst</code>&#xFF0C;&#x88E1;&#x9762;&#x6709;&#x8A73;&#x7D30;&#x5B9A;&#x7FA9;&#x4E86;&#x5176;&#x8A9E;&#x6CD5;&#x7684;&#x683C;&#x5F0F;&#x3002;QEMU &#x5728;&#x7DE8;&#x8B6F;&#x6642;&#xFF0C;&#x6703;&#x547C;&#x53EB; <code>Decodetree</code>&#xFF0C;&#x6839;&#x64DA;&#x5404;&#x5E73;&#x53F0;&#x6240;&#x5B9A;&#x7FA9;&#x7684; decode &#x6A94;&#xFF0C;&#x52D5;&#x614B;&#x751F;&#x6210;&#x5C0D;&#x61C9;&#x7684; decoder&#x3002;</p><ul><li><p>&#x5982; RISC-V &#x7684; instruction decoders &#x5C31;&#x662F;&#x88AB;&#x5B9A;&#x7FA9;&#x5728;&#xFF1A;<code>./target/riscv/*.decode</code> &#x4E2D;&#x3002;&#x5176; <code>Makefile.obj</code> &#x5C31;&#x6709;&#x5982;&#x4E0B;&#x7684;&#x5BA3;&#x544A;&#xFF1A;</p><p>  </p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">DECODETREE = $(SRC_PATH)/scripts/decodetree.py</span><br><span class="line"></span><br><span class="line">decode32-y = $(SRC_PATH)/target/riscv/insn32.decode</span><br><span class="line">decode32-$(TARGET_RISCV64) += $(SRC_PATH)/target/riscv/insn32-64.decode</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">target/riscv/decode_insn32.inc.c: $(decode32-y) $(DECODETREE)</span><br><span class="line">$(call quiet-command, \</span><br><span class="line">  $(PYTHON) $(DECODETREE) -o $@ --static-decode decode_insn32 \</span><br><span class="line">          $(decode32-y), &quot;GEN&quot;, $(TARGET_DIR)$@)</span><br></pre></td></tr></tbody></table></figure><p></p><p>  (&#x5BE6;&#x969B;&#x53C3;&#x6578;&#x8AAA;&#x660E;&#x8ACB;&#x898B; <a href="#decodetree-&#x53C3;&#x6578;">decodetree &#x53C3;&#x6578;</a>)</p></li></ul><p><code>Decodetree</code> &#x7684;&#x8A9E;&#x6CD5;&#x5171;&#x5206;&#x70BA;&#xFF1A;<a href="#Fields">Fields</a>&#x3001;<a href="#Argument-Sets">Argument Sets</a>&#x3001;<a href="#Formats">Formats</a>&#x3001;<a href="/QEMU-Decodetree-&#x8A9E;&#x6CD5;&#x4ECB;&#x7D39;-Part-2/#Patterns">Patterns</a>&#x3001;<a href="/QEMU-Decodetree-&#x8A9E;&#x6CD5;&#x4ECB;&#x7D39;-Part-2/#Pattern-Groups">Pattern Groups</a> &#x4E94;&#x90E8;&#x5206;&#x3002;&#x672C;&#x6587;&#x5C07;&#x4ECB;&#x7D39;&#x5982;&#x4F55;&#x900F;&#x904E; <code>Decodetree</code> &#x7684;&#x8A9E;&#x6CD5;&#xFF0C;&#x4F86;&#x52D5;&#x614B;&#x751F;&#x6210;&#x4E00;&#x500B;&#x6307;&#x4EE4;&#x7684; decoder&#x3002;</p><hr><h1 id="Fields"><a href="#Fields" class="headerlink" title="Fields"></a>Fields</h1><p><code>Field</code> &#x5B9A;&#x7FA9;&#x5982;&#x4F55;&#x53D6;&#x51FA;&#x4E00;&#x6307;&#x4EE4;&#x4E2D;&#xFF0C;&#x5404;<strong>&#x6B04;&#x4F4D;</strong> (eg: <code>rd</code>, <code>rs1</code>, <code>rs2</code>, <code>imm</code>) &#x7684;&#x503C;&#x3002;</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">field_def     := &apos;%&apos; identifier ( unnamed_field )* ( !function=identifier )?</span><br><span class="line">unnamed_field := number &apos;:&apos; ( &apos;s&apos; ) number</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x5176;&#x8A9E;&#x6CD5;&#x7531; <code>%</code> &#x958B;&#x982D;&#xFF0C;&#x96A8;&#x5F8C;&#x7DCA;&#x63A5;&#x8457;&#x4E00;&#x500B; <code>identifier</code> &#x53CA;&#x96F6;&#x500B;&#x6216;&#x591A;&#x500B; <code>unamed_field</code>&#xFF0C;&#x4E26;&#x53EF;&#x518D;&#x52A0;&#x4E0A;&#x53EF;&#x9078;&#x7684; <code>!function</code>&#x3002;</p><ul><li><code>identifier</code> &#x53EF;&#x7531;&#x958B;&#x767C;&#x8005;&#x81EA;&#x8A02;&#xFF0C;&#x5982;&#xFF1A;<code>rd</code>&#x3001;<code>imm</code>&#x2026; &#x7B49;&#x3002;</li><li><code>unamed_field</code> &#x5B9A;&#x7FA9;&#x4E86;&#x8A72;&#x6B04;&#x4F4D;&#x7684;&#x6240;&#x5728;&#x4F4D;&#x5143;&#x3002;&#x7B2C;&#x4E00;&#x500B;&#x6578;&#x5B57;&#x5B9A;&#x7FA9;&#x4E86;&#x8A72;&#x6B04;&#x4F4D;&#x7684; <code>least-significant bit position</code>&#xFF0C;&#x7B2C;&#x4E8C;&#x500B;&#x6578;&#x5B57;&#x5247;&#x5B9A;&#x7FA9;&#x4E86;&#x8A72;&#x6B04;&#x4F4D;&#x7684;<code>&#x4F4D;&#x5143;&#x9577;&#x5EA6;</code>&#x3002;&#x53E6;&#x5916;&#x53EF;&#x52A0;&#x4E0A;&#x53EF;&#x9078;&#x7684; <code>s</code> &#x5B57;&#x5143;&#x4F86;&#x6A19;&#x660E;&#x5728;&#x53D6;&#x51FA;&#x8A72;&#x6B04;&#x4F4D;&#x5F8C;&#xFF0C;&#x662F;&#x5426;&#x9700;&#x8981;&#x505A; <code>sign-extended</code>&#x3002;<ul><li>Eg&#xFF1A;<code>%rd  7:5</code> &#x4EE3;&#x8868; <code>rd</code> &#x4F54;&#x4E86;&#x6307;&#x4EE4;&#x4E2D; bits 7 ~ bits 11 &#x7684;&#x4F4D;&#x7F6E; (insn[11:7])&#xFF0C;&#x5171; 5 bits&#x3002;</li></ul></li><li><code>!function</code> &#x5B9A;&#x7FA9;&#x5728;&#x64F7;&#x53D6;&#x51FA;&#x8A72;&#x6B04;&#x4F4D;&#x7684;&#x503C;&#x5F8C;&#xFF0C;&#x6240;&#x6703;&#x518D;&#x547C;&#x53EB;&#x7684; function&#x3002;</li></ul><p><code>Field</code> (32-bits &#x6307;&#x4EE4;) &#x6700;&#x5F8C;&#x6703;&#x751F;&#x6210;&#x5C0D;&#x61C9;&#x7684; <code>extract32()</code> &#x53CA; <code>sextract32()</code> &#x7A0B;&#x5F0F;&#x78BC;[^2]&#xFF0C;&#x4EE5;&#x7528;&#x4F86;&#x53D6;&#x5F97;&#x6307;&#x4EE4;&#x4E2D;&#x5404;&#x6B04;&#x4F4D;&#x7684;&#x503C;&#xFF1A;</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><table><thead><tr><th>Input</th><th>Generated code</th></tr></thead><tbody><tr><td>%disp 0:s16</td><td>sextract(i, 0, 16)</td></tr><tr><td>%imm9 16:6 10:3</td><td>extract(i, 16, 6) &lt;&lt; 3 | extract(i, 10, 3)</td></tr><tr><td>%disp12 0:s1 1:1 2:10</td><td>sextract(i, 0, 1) &lt;&lt; 11 | extract(i, 1, 1) &lt;&lt; 10 | extract(i, 2, 10)</td></tr><tr><td>%shimm8 5:s8 13:1 !function=expand_shimm8</td><td>expand_shimm8(sextract(i, 5, 8) &lt;&lt; 1 | extract(i, 13, 1))</td></tr></tbody></table><p>&#x4EE5; RISC-V &#x7684; <code>U-type</code> &#x6307;&#x4EE4;&#x70BA;&#x4F8B;&#xFF1A;</p><img src="/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-1/riscv_u_type_insn.png" class title="RISC-V U-type instruction"><p>&#x5176;&#x4E2D;&#xFF0C;<code>imm</code> &#x4F54; <code>insn[31:12]</code>&#xFF0C;<code>rd</code> &#x4F54; <code>insn[11:7]</code>&#xFF0C;&#x4E14; <code>imm</code> &#x9700;&#x8981;&#x505A; <code>sign-extended</code>  &#x5F8C; <code>&#x5DE6;&#x79FB; 12 &#x4F4D;</code> (<code>20-bit immediate is shifted left by 12 bits to form U immediates</code>)&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x5011;&#x8981;&#x5B9A;&#x7FA9; RISC-V &#x7684; <code>U-type</code> &#x6307;&#x4EE4;&#xFF0C;&#x5247;&#x53EF;&#x4EE5;&#x5BA3;&#x544A;&#x6210;&#xFF1A;</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%rd       7:5</span><br><span class="line">%imm_u    12:s20                 !function=ex_shift_12</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x6700;&#x5F8C;&#x6703;&#x751F;&#x6210;&#x5982;&#x4E0B;&#x7684;&#x7A0B;&#x5F0F;&#x78BC;&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decode_insn32_extract_u</span><span class="hljs-params">(DisasContext *ctx, arg_u *a, <span class="hljs-keyword">uint32_t</span> insn)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    a-&gt;imm = ex_shift_12(ctx, sextract32(insn, <span class="hljs-number">12</span>, <span class="hljs-number">20</span>));</span><br><span class="line">    a-&gt;rd = extract32(insn, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>(P.S. <code>static void decode_insn32_extract_u()</code> &#x662F;&#x7531; <a href="#Formats">Format</a> &#x5B9A;&#x7FA9;&#x6240;&#x751F;&#x6210;&#x7684;&#xFF0C;&#x800C; <code>arg_u *a</code> &#x5247;&#x662F;&#x7531; <a href="#Argument-Sets">Argument Set</a> &#x5B9A;&#x7FA9;&#x6240;&#x751F;&#x6210;&#x7684;&#xFF0C;&#x5C07;&#x6703;&#x5728;&#x5F8C;&#x9762;&#x7684;&#x90E8;&#x5206;&#x518D;&#x505A;&#x8AAA;&#x660E;)</p><p>&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a-&gt;imm = ex_shift_12(ctx, sextract32(insn, <span class="hljs-number">12</span>, <span class="hljs-number">20</span>));</span><br><span class="line">a-&gt;rd = extract32(insn, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>);</span><br></pre></td></tr></tbody></table></figure><p></p><ul><li><p><code>a-&gt;imm</code> &#x662F;&#x7531; <code>insn[31:12]</code> &#x6240;&#x53D6;&#x5F97;&#x4E26;&#x505A; <code>sign-extended</code>&#xFF0C;&#x4E14;&#x6703;&#x518D;&#x547C;&#x53EB; <code>ex_shift_12()</code> &#x4F86; <code>&#x5DE6;&#x79FB; 12 &#x500B; bits</code>&#x3002;</p><ul><li><p>P.S. RISC-V &#x7684; <code>ex_shift_12()</code> &#x662F;&#x900F;&#x904E;&#x5B9A;&#x7FA9;&#x5728;<code>./target/riscv/translate.c</code> &#x4E2D; <code>EX_SH</code> &#x9019;&#x500B; macro &#x6240;&#x5C55;&#x958B;&#x7684;&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EX_SH(amount) \</span></span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ex_shift_#<span class="hljs-meta">#amount(DisasContext *ctx, int imm) \</span></span><br><span class="line">    {                                         \</span><br><span class="line">        <span class="hljs-keyword">return</span> imm &lt;&lt; amount;                 \</span><br><span class="line">    }</span><br><span class="line">EX_SH(<span class="hljs-number">1</span>)</span><br><span class="line">EX_SH(<span class="hljs-number">2</span>)</span><br><span class="line">EX_SH(<span class="hljs-number">3</span>)</span><br><span class="line">EX_SH(<span class="hljs-number">4</span>)</span><br><span class="line">EX_SH(<span class="hljs-number">12</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li></ul></li><li><p><code>a-&gt;rd</code> &#x662F;&#x7531; <code>insn[11:7]</code> &#x6240;&#x53D6;&#x5F97;&#x3002;</p></li></ul><p>&#x6B64;&#x5916;&#xFF0C;&#x5728; <code>Decodetree</code> &#x7684; spec. &#x4E2D;&#x4E5F;&#x6709;&#x63D0;&#x5230;&#xFF0C;&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x900F;&#x904E;&#x53EA;&#x5B9A;&#x7FA9; <code>!function</code> &#x4F86;&#x76F4;&#x63A5;&#x547C;&#x53EB;&#x8A72; function&#x3002;&#x5728;&#x9019;&#x7A2E;&#x60C5;&#x6CC1;&#x4E0B;&#xFF0C;&#x53EA;&#x6709; <code>DisasContext</code> &#x6703;&#x88AB;&#x50B3;&#x5165;&#x8A72; function&#x3002;</p><p>One may use <code>!function</code> with zero <code>unnamed_fields</code>.  This case is called<br>a <strong>parameter</strong>, and the named function is only passed the <code>DisasContext</code><br>and returns an integral value extracted from there.</p><p>&#x5982; ARM Thumb <code>./target/arm/t16.decode</code> &#x5C31;&#x6709;&#x5B9A;&#x7FA9;&#xFF1A;</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Set S if the instruction is outside of an IT block.</span><br><span class="line">%s               !function=t16_setflags</span><br></pre></td></tr></tbody></table></figure><p></p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">disas_t16_extract_addsub_2i</span><span class="hljs-params">(DisasContext *ctx, arg_s_rri_rot *a, <span class="hljs-keyword">uint16_t</span> insn)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    a-&gt;imm = extract32(insn, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>);</span><br><span class="line">    a-&gt;rn = extract32(insn, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>);</span><br><span class="line">    a-&gt;rd = extract32(insn, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);</span><br><span class="line">    a-&gt;s = t16_setflags(ctx); <span class="hljs-comment">// &#x547C;&#x53EB; t16_setflags()&#xFF0C;&#x4E26;&#x50B3;&#x5165; DisasContext</span></span><br><span class="line">    a-&gt;rot = <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x672A;&#x5305;&#x542B;&#x4EFB;&#x4F55; <code>unnamed_fields</code> &#x6216; <code>!function</code> &#x7684; <code>Field</code> &#x6703;&#x88AB;&#x8996;&#x70BA;&#x932F;&#x8AA4;&#x3002;</p><p>A field with no <code>unnamed_fields</code> and no <code>!function</code> is in error.</p><hr><h1 id="Argument-Sets"><a href="#Argument-Sets" class="headerlink" title="Argument Sets"></a>Argument Sets</h1><p><code>Argument Set</code> &#x5B9A;&#x7FA9;&#x7528;&#x4F86;&#x4FDD;&#x5B58;&#x5F9E;&#x6307;&#x4EE4;&#x4E2D;&#x6240;&#x64F7;&#x53D6;&#x51FA;&#x4F86;&#x5404;&#x6B04;&#x4F4D;&#x7684;&#x503C;&#x3002;</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">args_def    := &apos;&amp;&apos; identifier ( args_elt )+ ( !extern )?</span><br><span class="line">args_elt    := identifier</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x5176;&#x8A9E;&#x6CD5;&#x7531; <code>&amp;</code> &#x958B;&#x982D;&#xFF0C;&#x96A8;&#x5F8C;&#x7DCA;&#x63A5;&#x8457;&#x4E00;&#x500B;&#x6216;&#x591A;&#x500B;&#x7684; <code>identifier</code> &#xFF0C;&#x4E26;&#x53EF;&#x518D;&#x52A0;&#x4E0A;&#x53EF;&#x9078;&#x7684; <code>!extern</code> &#x3002;</p><ul><li><code>identifier</code> &#x53EF;&#x7531;&#x958B;&#x767C;&#x8005;&#x81EA;&#x8A02;&#xFF0C;&#x5982;&#xFF1A;<code>regs</code>&#x3001;<code>loadstore</code>&#x2026; &#x7B49;&#x3002;</li><li><code>!extern</code> &#x5247;&#x8868;&#x793A;&#x662F;&#x5426;&#x5728;&#x5176;&#x4ED6;&#x5730;&#x65B9;&#x5DF2;&#x7D93;&#x7531;&#x5176;&#x4ED6;&#x7684; decoder &#x5B9A;&#x7FA9;&#x904E;&#x3002;&#x5982;&#x679C;&#x52A0;&#x4E0A;&#x7684;&#x8A71;&#xFF0C;&#x5C31;<strong>&#x4E0D;&#x6703;</strong>&#x518D;&#x6B21;&#x751F;&#x6210;&#x5C0D;&#x61C9;&#x7684; <code>argument set struct</code>&#x3002;</li></ul><h3 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples"></a>Examples</h3><hr><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;ampreg3 ra rb rc</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x6703;&#x751F;&#x6210;&#x4EE5;&#x4E0B;&#x7684; <code>argument set struct</code>&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> {</span></span><br><span class="line">    <span class="hljs-keyword">int</span> ra;</span><br><span class="line">    <span class="hljs-keyword">int</span> rb;</span><br><span class="line">    <span class="hljs-keyword">int</span> rc;</span><br><span class="line">} arg_reg3;</span><br></pre></td></tr></tbody></table></figure><p></p><hr><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;loadstore reg base offset</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x5247;&#x6703;&#x751F;&#x6210;&#x4EE5;&#x4E0B;&#x7684; <code>argument set struct</code>&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> {</span></span><br><span class="line">    <span class="hljs-keyword">int</span> base;</span><br><span class="line">    <span class="hljs-keyword">int</span> offset;</span><br><span class="line">    <span class="hljs-keyword">int</span> reg;</span><br><span class="line">} arg_loadstore;</span><br></pre></td></tr></tbody></table></figure><p></p><hr><p>&#x56E0;&#x6B64;&#xFF0C;&#x4EE5;&#x525B;&#x525B;&#x7684; RISC-V <code>U-type</code> &#x6307;&#x4EE4;&#x70BA;&#x4F8B;&#xFF0C;&#x6211;&#x5011;&#x9700;&#x8981;&#x5F9E;&#x6307;&#x4EE4;&#x4E2D;&#x64F7;&#x53D6; <code>imm</code> &#x53CA; <code>rd</code> &#x6B04;&#x4F4D;&#x7684;&#x503C;&#xFF0C;&#x53EF;&#x4EE5;&#x5BA3;&#x544A;&#x5176; <code>argument set</code> &#x5982;&#x4E0B;&#xFF1A;</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;u    imm rd</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x6700;&#x5F8C;&#x6703;&#x751F;&#x6210;&#x4EE5;&#x4E0B;&#x7684; <code>argument set struct</code>&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> {</span></span><br><span class="line">    <span class="hljs-keyword">int</span> imm;</span><br><span class="line">    <span class="hljs-keyword">int</span> rd;</span><br><span class="line">} arg_u;</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x6B64; <code>argument set struct</code> &#x6703;&#x88AB;&#x50B3;&#x5165;&#x7531; <code>Format</code> &#x5B9A;&#x7FA9;&#x6240;&#x751F;&#x6210;&#x7684; extract function&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decode_insn32_extract_u</span><span class="hljs-params">(DisasContext *ctx, arg_u *a, <span class="hljs-keyword">uint32_t</span> insn)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    a-&gt;imm = ex_shift_12(ctx, sextract32(insn, <span class="hljs-number">12</span>, <span class="hljs-number">20</span>));</span><br><span class="line">    a-&gt;rd = extract32(insn, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x6240;&#x50B3;&#x5165;&#x7684;<code>arg_u</code> &#x6703;&#x4FDD;&#x5B58;&#x5F9E;&#x6307;&#x4EE4;&#x4E2D;&#x64F7;&#x53D6;&#x51FA;&#x7684; <code>imm</code> &#x53CA; <code>rd</code> &#x6B04;&#x4F4D;&#x7684;&#x503C;&#xFF0C;&#x5F85;&#x5F8C;&#x7E8C;&#x4F7F;&#x7528;&#x3002;</p><hr><h1 id="Formats"><a href="#Formats" class="headerlink" title="Formats"></a>Formats</h1><p><code>Format</code> &#x5B9A;&#x7FA9;&#x4E86;&#x6307;&#x4EE4;&#x7684;&#x683C;&#x5F0F; (&#x5982; RISC-V &#x4E2D;&#x7684; <code>R</code>&#x3001;<code>I</code>&#x3001;<code>S</code>&#x3001;<code>B</code>&#x3001;<code>U</code>&#x3001;<code>J-type</code>)&#xFF0C;&#x4E26;&#x6703;&#x751F;&#x6210;&#x5C0D;&#x61C9;&#x7684; decode function&#x3002;</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fmt_def      := &apos;@&apos; identifier ( fmt_elt )+</span><br><span class="line">fmt_elt      := fixedbit_elt | field_elt | field_ref | args_ref</span><br><span class="line">fixedbit_elt := [01.-]+</span><br><span class="line">field_elt    := identifier &apos;:&apos; &apos;s&apos;? number</span><br><span class="line">field_ref    := &apos;%&apos; identifier | identifier &apos;=&apos; &apos;%&apos; identifier</span><br><span class="line">args_ref     := &apos;&amp;&apos; identifier</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x5176;&#x8A9E;&#x6CD5;&#x7531; <code>@</code> &#x958B;&#x982D;&#xFF0C;&#x96A8;&#x5F8C;&#x7DCA;&#x63A5;&#x8457;&#x4E00;&#x500B; <code>identifier</code> &#x53CA;&#x4E00;&#x500B;&#x4EE5;&#x4E0A;&#x7684; <code>fmt_elt</code>&#x3002;</p><ul><li><p><code>identifier</code> &#x53EF;&#x7531;&#x958B;&#x767C;&#x8005;&#x81EA;&#x8A02;&#xFF0C;&#x5982;&#xFF1A;<code>opr</code>&#x3001;<code>opi</code>&#x2026; &#x7B49;&#x3002;</p></li><li><p><code>fmt_elt</code> &#x5247;&#x53EF;&#x4EE5;&#x63A1;&#x7528;&#x4EE5;&#x4E0B;&#x4E0D;&#x540C;&#x7684;&#x8A9E;&#x6CD5;&#xFF1A;</p><ul><li><p><code>fixedbit_elt</code> &#x5305;&#x542B;&#x4E00;&#x500B;&#x6216;&#x591A;&#x500B;  <code>0</code>&#x3001;<code>1</code>&#x3001;<code>.</code>&#x3001;<code>-</code>&#xFF0C;&#x6BCF;&#x4E00;&#x500B;&#x4EE3;&#x8868;&#x6307;&#x4EE4;&#x4E2D;&#x7684; 1 &#x500B; bit&#x3002;</p><ul><li><code>.</code> &#x4EE3;&#x8868;&#x8A72; bit &#x53EF;&#x4EE5;&#x7528; <code>0</code> &#x6216;&#x662F; <code>1</code> &#x4F86;&#x8868;&#x793A;&#x3002;</li><li><code>-</code> &#x4EE3;&#x8868;&#x8A72; bit &#x5B8C;&#x5168;&#x88AB;&#x5FFD;&#x7565;&#x3002;</li></ul></li><li><p><code>field_elt</code> &#x53EF;&#x4EE5;&#x7528; <a href="#Fields">Field</a> &#x7684;&#x8A9E;&#x6CD5;&#x4F86;&#x5BA3;&#x544A;&#x3002;</p><ul><li>Eg&#xFF1A;<code>ra:5</code>&#x3001;<code>rb:5</code>&#x3001;<code>lit:8</code></li></ul></li><li><p><code>field_ref</code> &#x6709;&#x4E0B;&#x5217;&#x5169;&#x7A2E;&#x683C;&#x5F0F; (&#x4EE5;&#x4E0B;&#x7BC4;&#x4F8B;&#x53C3;&#x8003;&#x4E0A;&#x6587;&#x6240;&#x5B9A;&#x7FA9;&#x4E4B; <a href="#Fields">Field</a>)&#xFF1A;</p><ul><li><p><code>&apos;%&apos; identifier</code>&#xFF1A;&#x76F4;&#x63A5;&#x53C3;&#x8003;&#x4E00;&#x500B;&#x88AB;&#x5B9A;&#x7FA9;&#x904E;&#x7684; <code>Field</code>&#x3002;</p><ul><li><p>&#x5982;&#xFF1A;<code>%rd</code>&#xFF0C;&#x6703;&#x751F;&#x6210;&#xFF1A;</p><p>  </p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a-&gt;rd = extract32(insn, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>);</span><br></pre></td></tr></tbody></table></figure><p></p></li></ul></li><li><p><code>identifier &apos;=&apos; &apos;%&apos; identifier</code>&#xFF1A;&#x76F4;&#x63A5;&#x53C3;&#x8003;&#x4E00;&#x500B;&#x88AB;&#x5B9A;&#x7FA9;&#x904E;&#x7684; <code>Field</code>&#xFF0C;&#x4F46;&#x900F;&#x904E;&#x7B2C;&#x4E00;&#x500B; <code>identifier</code> &#x4F86;&#x91CD;&#x65B0;&#x547D;&#x540D;&#x5176;&#x6240;&#x5C0D;&#x61C9;&#x7684; <code>argument</code> &#x540D;&#x7A31;&#x3002;&#x6B64;&#x65B9;&#x5F0F;&#x53EF;&#x4EE5;&#x7528;&#x4F86;&#x6307;&#x5B9A;&#x4E0D;&#x540C;&#x7684; <code>argument</code> &#x540D;&#x7A31;&#x4F86;&#x53C3;&#x8003;&#x81F3;&#x540C;&#x4E00;&#x500B; <code>Field</code>&#x3002;</p><ul><li><p>&#x5982;&#xFF1A;<code>my_rd=%rd</code>&#xFF0C;&#x6703;&#x751F;&#x6210;&#xFF1A;</p><p>  </p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a-&gt;my_rd = extract32(insn, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// rd &#x88AB;&#x91CD;&#x65B0;&#x547D;&#x540D;&#x70BA; my_rd</span></span><br></pre></td></tr></tbody></table></figure><p></p></li></ul></li></ul></li><li><p><code>args_ref</code> &#x6307;&#x5B9A;&#x6240;&#x50B3;&#x5165; decode function &#x7684; <code>Argument Set</code>&#x3002;&#x82E5;&#x6C92;&#x6709;&#x6307;&#x5B9A; <code>args_ref</code> &#x7684;&#x8A71;&#xFF0C;<code>Decodetree</code> &#x6703;&#x6839;&#x64DA; <code>field_elt</code> &#x6216; <code>field_ref</code> &#x81EA;&#x52D5;&#x751F;&#x6210;&#x4E00;&#x500B; <code>Argument Set</code>&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x4E00;&#x500B; <code>Format</code> &#x6700;&#x591A;&#x53EA;&#x80FD;&#x5305;&#x542B;&#x4E00;&#x500B; <code>args_ref</code>&#x3002;</p></li></ul></li></ul><p>&#x7576; <code>fixedbit_elt</code> &#x6216; <code>field_ref</code> &#x88AB;&#x5B9A;&#x7FA9;&#x6642;&#xFF0C;&#x8A72; <code>Foramt</code> &#x7684;&#x6240;&#x6709;&#x7684; bits &#x90FD;&#x5FC5;&#x9808;&#x88AB;&#x5B9A;&#x7FA9; (&#x53EF;&#x900F;&#x904E; <code>fixedbit_elt</code> &#x6216; <code>.</code> &#x4F86;&#x5B9A;&#x7FA9;&#x5404;&#x500B; bits&#xFF0C;<code>&#x7A7A;&#x683C;</code>&#x6703;&#x88AB;&#x5FFD;&#x7565;)&#x3002;</p><h3 id="Examples-2"><a href="#Examples-2" class="headerlink" title="Examples"></a>Examples</h3><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@opi    ...... ra:5 lit:8    1 ....... rc:5</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x5B9A;&#x7FA9;&#x4E86; <code>op1</code> &#x9019;&#x500B; <code>Format</code>&#xFF0C;&#x5176;&#x4E2D;&#xFF1A;</p><ul><li>insn[31:26] &#x53EF;&#x70BA; <code>0</code> &#x6216; <code>1</code>&#x3002;</li><li>insn[25:21] &#x70BA; <code>ra</code>&#x3002;</li><li>insn[20:13] &#x70BA; <code>lit</code>&#x3002;</li><li>insn[12] &#x56FA;&#x5B9A;&#x70BA; <code>1</code>&#x3002;</li><li>insn[11:5] &#x53EF;&#x70BA; <code>0</code> &#x6216; <code>1</code>&#x3002;</li><li>insn[4:0] &#x70BA; <code>rc</code>&#x3002;</li></ul><p>&#x6B64; <code>Format</code> &#x6703;&#x751F;&#x6210;&#x4EE5;&#x4E0B;&#x7684; decode function&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> {</span></span><br><span class="line">    <span class="hljs-keyword">int</span> lit;</span><br><span class="line">    <span class="hljs-keyword">int</span> ra;</span><br><span class="line">    <span class="hljs-keyword">int</span> rc;</span><br><span class="line">} arg_decode_insn320;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decode_insn32_extract_opi</span><span class="hljs-params">(DisasContext *ctx, arg_decode_insn320 *a, <span class="hljs-keyword">uint32_t</span> insn)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    a-&gt;ra = extract32(insn, <span class="hljs-number">21</span>, <span class="hljs-number">5</span>);</span><br><span class="line">    a-&gt;lit = extract32(insn, <span class="hljs-number">13</span>, <span class="hljs-number">8</span>);</span><br><span class="line">    a-&gt;rc = extract32(insn, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x7531;&#x65BC;&#x6211;&#x5011;&#x6C92;&#x6709;&#x6307;&#x5B9A; <code>args_ref</code>&#xFF0C;&#x56E0;&#x6B64; <code>Decodetree</code> &#x6839;&#x64DA;&#x4E86; <code>field_elt</code> &#x7684;&#x5B9A;&#x7FA9;&#xFF0C;&#x81EA;&#x52D5;&#x751F;&#x6210;&#x4E86; <code>arg_decode_insn320</code> &#x9019;&#x500B; <code>Argument Set</code>&#x3002;</p><hr><p>&#x4EE5; RISC-V <code>I-type</code> &#x6307;&#x4EE4;&#x70BA;&#x4F8B;&#xFF1A;</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Fields:</span><br><span class="line">%rs1       15:5</span><br><span class="line">%rd        7:5</span><br><span class="line"></span><br><span class="line"># immediates:</span><br><span class="line">%imm_i    20:s12</span><br><span class="line"></span><br><span class="line"># Argment sets:</span><br><span class="line">&amp;i    imm rs1 rd</span><br><span class="line"></span><br><span class="line">@i       ........ ........ ........ ........ &amp;i      imm=%imm_i     %rs1 %rd</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x5B9A;&#x7FA9;&#x4E86; <code>i</code> &#x9019;&#x500B; <code>Format</code>&#xFF0C;&#x5176;&#x4E2D;&#xFF1A;</p><ul><li>insn[31:20] &#x70BA; <code>imm</code>&#xFF0C;&#x4E14;&#x70BA; <code>sign-extended</code>&#x3002;</li><li>insn[19:5] &#x70BA; <code>rs1</code>&#x3002;</li><li>insn[11:7] &#x70BA; <code>rd</code>&#x3002;</li></ul><p>&#x6B64;&#x5916;&#xFF0C;&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF1A;</p><ul><li>&#x6B64; <code>Format</code> &#x6307;&#x5B9A;&#x4E86; <code>Argument Set</code>&#xFF1A;<code>&amp;i</code>&#x3002; <code>&amp;i</code> &#x4E2D;&#x5FC5;&#x9808;&#x5305;&#x542B;&#x6240;&#x6709;&#x6709;&#x7528;&#x5230;&#x7684; <code>arguments</code> (&#x4E5F;&#x5C31;&#x662F;&#xFF1A;<code>imm</code>&#x3001;<code>rs1</code> &#x53CA; <code>rd</code>)</li><li><code>imm</code> &#x662F;&#x900F;&#x904E;&#x91CD;&#x65B0;&#x547D;&#x540D;&#x7684;&#x65B9;&#x5F0F;&#x4F86;&#x53C3;&#x8003; <code>%imm_i</code> &#x9019;&#x500B; <code>Field</code>&#x3002;</li></ul><p>&#x6B64;&#x7BC4;&#x4F8B;&#x6703;&#x751F;&#x6210;&#x4EE5;&#x4E0B;&#x7684; decode function&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> {</span></span><br><span class="line">    <span class="hljs-keyword">int</span> imm;</span><br><span class="line">    <span class="hljs-keyword">int</span> rd;</span><br><span class="line">    <span class="hljs-keyword">int</span> rs1;</span><br><span class="line">} arg_i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decode_insn32extract_i</span><span class="hljs-params">(DisasContext *ctx, arg_i *a, <span class="hljs-keyword">uint32_t</span> insn)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    a-&gt;imm = sextract32(insn, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>); <span class="hljs-comment">// imm_i &#x88AB;&#x91CD;&#x65B0;&#x547D;&#x540D;&#x70BA; imm</span></span><br><span class="line">    a-&gt;rs1 = extract32(insn, <span class="hljs-number">15</span>, <span class="hljs-number">5</span>);</span><br><span class="line">    a-&gt;rd = extract32(insn, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x76F8;&#x6BD4;&#x65BC;&#x7B2C;&#x4E00;&#x500B;&#x7BC4;&#x4F8B;&#xFF0C;&#x7531;&#x65BC;&#x9019;&#x6B21;&#x6211;&#x5011;&#x6709;&#x6307;&#x5B9A; <code>args_ref</code>&#xFF1A;<code>&amp;i</code>&#xFF0C;&#x56E0;&#x6B64;&#x5C0D;&#x61C9;&#x7684; <code>arg_i</code> &#x6703;&#x88AB;&#x50B3;&#x5165; decode function&#x3002;</p><hr><p>&#x56DE;&#x5230;&#x5148;&#x524D;&#x7684; RISC-V <code>U-type</code> &#x6307;&#x4EE4;&#xFF0C;&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x5982;&#x540C; <code>I-type</code> &#x6307;&#x4EE4;&#x5B9A;&#x7FA9;&#x5176;&#x683C;&#x5F0F;&#xFF1A;</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Fields:</span><br><span class="line">%rd        7:5</span><br><span class="line"></span><br><span class="line"># immediates:</span><br><span class="line">%imm_u    12:s20                 !function=ex_shift_12</span><br><span class="line"></span><br><span class="line"># Argument sets:</span><br><span class="line">&amp;u    imm rd</span><br><span class="line"></span><br><span class="line">@u       ....................      ..... ....... &amp;u      imm=%imm_u          %rd</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x5B9A;&#x7FA9;&#x4E86; <code>u</code> &#x9019;&#x500B; <code>Format</code>&#xFF0C;&#x5176;&#x4E2D;&#xFF1A;</p><ul><li>insn[31:12] &#x70BA; <code>imm</code>&#xFF0C;&#x4E14;&#x70BA; <code>sign-extended</code>&#x3002;</li><li>insn[11:7] &#x70BA; <code>rd</code>&#x3002;</li></ul><p>&#x6703;&#x751F;&#x6210;&#x4EE5;&#x4E0B;&#x7684; decode function&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> {</span></span><br><span class="line">    <span class="hljs-keyword">int</span> imm;</span><br><span class="line">    <span class="hljs-keyword">int</span> rd;</span><br><span class="line">} arg_u;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decode_insn32_extract_u</span><span class="hljs-params">(DisasContext *ctx, arg_u *a, <span class="hljs-keyword">uint32_t</span> insn)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    a-&gt;imm = ex_shift_12(ctx, sextract32(insn, <span class="hljs-number">12</span>, <span class="hljs-number">20</span>));</span><br><span class="line">    a-&gt;rd = extract32(insn, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF1A;</p><ul><li>&#x6B64; <code>Format</code> &#x6307;&#x5B9A;&#x4E86; <code>Argument Set</code>&#xFF1A;<code>&amp;u</code>&#x3002; <code>&amp;u</code> &#x4E2D;&#x5FC5;&#x9808;&#x5305;&#x542B;&#x6240;&#x6709;&#x6709;&#x7528;&#x5230;&#x7684; <code>arguments</code> (&#x4E5F;&#x5C31;&#x662F;&#xFF1A;<code>imm</code>&#x3001;<code>rd</code>)</li><li><code>imm</code> &#x662F;&#x900F;&#x904E;&#x91CD;&#x65B0;&#x547D;&#x540D;&#x7684;&#x65B9;&#x5F0F;&#x4F86;&#x53C3;&#x8003; <code>%imm_u</code> &#x9019;&#x500B; <code>Field</code>&#x3002;</li></ul><hr><p>&#x4EE5;&#x4E0A;&#x5C31;&#x662F; <code>Decodetree</code> &#x7684; <a href="#Fields">Fields</a>&#x3001;<a href="#Argument-Sets">Argument Sets</a> &#x53CA; <a href="#Formats">Formats</a> &#x8A9E;&#x6CD5;&#x7684;&#x7C21;&#x4ECB;&#x3002;&#x5269;&#x4E0B;&#x7684; <a href="/QEMU-Decodetree-&#x8A9E;&#x6CD5;&#x4ECB;&#x7D39;-Part-2/#Patterns">Patterns</a> &#x53CA; <a href="/QEMU-Decodetree-&#x8A9E;&#x6CD5;&#x4ECB;&#x7D39;-Part-2/#Pattern-Groups">Pattern Groups</a> &#x5C31;&#x7559;&#x5230; <a href="/QEMU-Decodetree-%E8%AA%9E%E6%B3%95%E4%BB%8B%E7%B4%B9-Part-2/" title="Part 2.">Part 2.</a> &#x518D;&#x505A;&#x4ECB;&#x7D39;&#x3002;</p><hr><h1 id="decodetree-&#x53C3;&#x6578;"><a href="#decodetree-&#x53C3;&#x6578;" class="headerlink" title="decodetree &#x53C3;&#x6578;"></a>decodetree &#x53C3;&#x6578;</h1><ul><li><code>--translate</code>&#xFF1A;translator function &#x7684; prefix&#xFF0C;&#x9810;&#x8A2D;&#x70BA; <code>trans</code>&#x3002;&#x4E00;&#x65E6;&#x6307;&#x5B9A;&#x5F8C;&#xFF0C;translator function &#x7684; scope &#x5C31;&#x4E0D;&#x6703;&#x518D;&#x662F; <code>static</code>&#x3002;</li><li><code>--decode</code>&#xFF1A;decode function &#x7684; prefix&#xFF0C;&#x9810;&#x8A2D;&#x70BA; <code>decode</code>&#xFF0C;&#x4E14; scope &#x70BA; <code>static</code>&#x3002;&#x4E00;&#x65E6;&#x6307;&#x5B9A;&#x5F8C;&#xFF0C;decode function &#x7684; scope &#x5C31;&#x4E0D;&#x6703;&#x518D;&#x662F; <code>static</code>&#x3002;</li><li><code>--static-decode</code>&#xFF1A;&#x5982;&#x540C; <code>--decode</code>&#xFF0C;&#x4E0D;&#x904E; decode function &#x7684; scope &#x4ECD;&#x7DAD;&#x6301;&#x70BA; <code>static</code>&#x3002;</li><li><code>-o</code> / <code>--output</code>&#xFF1A;&#x6307;&#x5B9A;&#x751F;&#x6210;&#x7684; decoder <code>.c</code> &#x6A94;&#x8DEF;&#x5F91;&#x3002;</li><li><code>-w</code> / <code>--insnwidth</code>&#xFF1A;&#x6307;&#x4EE4;&#x9577;&#x5EA6;&#xFF0C;eg&#xFF1A;<code>32</code> or <code>16</code>&#xFF0C;&#x9810;&#x8A2D;&#x70BA; <code>32</code>&#x3002;</li><li><code>--varinsnwidth</code>&#xFF1A;&#x6307;&#x4EE4;&#x70BA;&#x4E0D;&#x5B9A;&#x9577;&#x5EA6;&#x3002;</li><li><code>&#x6700;&#x5F8C;&#x4E00;&#x500B;&#x53C3;&#x6578;</code>&#x70BA;&#x8F38;&#x5165;&#x7684; decode &#x6A94;&#x8DEF;&#x5F91;&#x3002;</li></ul><p>&#x57F7;&#x884C;&#x7BC4;&#x4F8B;&#xFF1A;</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./decodetree.py -o target/riscv/decode_insn16.inc.c --static-decode decode_insn16 \</span><br><span class="line">    -w 16 ./insn16.decode</span><br></pre></td></tr></tbody></table></figure><p></p><p>[^1]: ARM &#x5176;&#x5BE6;&#x5728; <code>Decodetree</code> &#x5F15;&#x9032;&#x5F8C;&#xFF0C;&#x4E5F;&#x6709;&#x90E8;&#x5206;&#x7684; instructions &#x6539;&#x63A1;&#x7528; <code>Decodetree</code> &#x4F86;&#x52D5;&#x614B;&#x751F;&#x6210;&#x5C0D;&#x61C9;&#x7684; instruction decoders&#xFF0C;&#x5982; Thumb &#x6307;&#x4EE4;&#xFF1A;<code>./target/arm/t32.decode</code> &#x53CA; <code>./target/arm/t16.decode</code>&#x3002;</p><p>[^2]: <code>extract32()</code> &#x53CA; <code>sextract32()</code> &#x88AB;&#x5B9A;&#x7FA9;&#x5728; <code>include/qemu/bitops.h</code>&#xFF1A;</p><pre><code><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * sextract32:</span></span><br><span class="line"><span class="hljs-comment"> * @value: the value to extract the bit field from</span></span><br><span class="line"><span class="hljs-comment"> * @start: the lowest bit in the bit field (numbered from 0)</span></span><br><span class="line"><span class="hljs-comment"> * @length: the length of the bit field</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * Extract from the 32 bit input @value the bit field specified by the</span></span><br><span class="line"><span class="hljs-comment"> * @start and @length parameters, and return it, sign extended to</span></span><br><span class="line"><span class="hljs-comment"> * an int32_t (ie with the most significant bit of the field propagated</span></span><br><span class="line"><span class="hljs-comment"> * to all the upper bits of the return value). The bit field must lie</span></span><br><span class="line"><span class="hljs-comment"> * entirely within the 32 bit word. It is valid to request that</span></span><br><span class="line"><span class="hljs-comment"> * all 32 bits are returned (ie @length 32 and @start 0).</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * Returns: the sign extended value of the bit field extracted from the</span></span><br><span class="line"><span class="hljs-comment"> * input value.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">int32_t</span> <span class="hljs-title">sextract32</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span> value, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> length)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    assert(start &gt;= <span class="hljs-number">0</span> &amp;&amp; length &gt; <span class="hljs-number">0</span> &amp;&amp; length &lt;= <span class="hljs-number">32</span> - start);</span><br><span class="line">    <span class="hljs-comment">/* Note that this implementation relies on right shift of signed</span></span><br><span class="line"><span class="hljs-comment">     * integers being an arithmetic shift.</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">return</span> ((<span class="hljs-keyword">int32_t</span>)(value &lt;&lt; (<span class="hljs-number">32</span> - length - start))) &gt;&gt; (<span class="hljs-number">32</span> - length);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></code></pre></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;#x26A0;&amp;#xFE0F; &amp;#x672C;&amp;#x6587;&amp;#x6240;&amp;#x4F7F;&amp;#x7528;&amp;#x7684; QEMU &amp;#x7248;&amp;#x672C;&amp;#x70BA;&amp;#xFF1A;&lt;code&gt;v4.2.0&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;QEMU &amp;#x5728; decode &amp;#x6307;&amp;#x4EE4;&amp;#x7684;&amp;#x6642;&amp;#x5019;&amp;#xFF0C;&amp;#x9700;&amp;#x8981;&amp;#x547C;&amp;#x53EB;&amp;#x5404;&amp;#x5E73;&amp;#x53F0;&amp;#x6240;&amp;#x5B9A;&amp;#x7FA9;&amp;#x7684; instruction decoders &amp;#x4F86;&amp;#x89E3;&amp;#x6790;&amp;#x6307;&amp;#x4EE4;&amp;#x3002;&amp;#x5982;&amp;#x5728; ARM &amp;#x5E73;&amp;#x53F0;&amp;#x4E0B;&amp;#xFF0C;&amp;#x5C31;&amp;#x5B9A;&amp;#x7FA9;&amp;#x4E86;&amp;#xFF1A;&lt;code&gt;disas_arm_insn()&lt;/code&gt;&amp;#x3001;&lt;code&gt;disas_thumb_insn()&lt;/code&gt; &amp;#x53CA; &lt;code&gt;disas_thumb2_insn()&lt;/code&gt; &amp;#x7B49;&amp;#x4F86;&amp;#x5206;&amp;#x5225;&amp;#x8CA0;&amp;#x8CAC; ARM 32-bits &amp;#x6307;&amp;#x4EE4;&amp;#x3001;ARM Thumb &amp;#x6307;&amp;#x4EE4;&amp;#x53CA; ARM Thumb2 &amp;#x6307;&amp;#x4EE4;&amp;#x7684;&amp;#x89E3;&amp;#x6790;&amp;#x3002;&lt;/p&gt;
&lt;p&gt;&amp;#x800C; &lt;code&gt;Decodetree&lt;/code&gt; &amp;#x5247;&amp;#x662F;&amp;#x7531; &lt;code&gt;Bastian Koppelmann&lt;/code&gt; &amp;#x65BC; 2017 &amp;#x5E74;&amp;#x5728; porting RISC-V QEMU &amp;#x7684;&amp;#x6642;&amp;#x5019;&amp;#x6240;&amp;#x63D0;&amp;#x51FA;&amp;#x4F86;&amp;#x7684;&amp;#x6A5F;&amp;#x5236; (&amp;#x8A73;&amp;#x898B;&amp;#xFF1A;&lt;a href=&quot;https://lists.gnu.org/archive/html/qemu-devel/2017-07/msg07735.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x8A0E;&amp;#x8AD6;&amp;#x4E32; 1&lt;/a&gt;&amp;#x3001;&lt;a href=&quot;https://lists.gnu.org/archive/html/qemu-devel/2017-10/msg05046.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x8A0E;&amp;#x8AD6;&amp;#x4E32; 2&lt;/a&gt;)&amp;#x3002;&amp;#x4E3B;&amp;#x56E0;&amp;#x662F;&amp;#x904E;&amp;#x5F80;&amp;#x7684; instruction decoders (&amp;#x5982;&amp;#xFF1A;ARM) &amp;#x90FD;&amp;#x662F;&amp;#x63A1;&amp;#x7528;&amp;#x4E00;&amp;#x5927;&amp;#x5305;&amp;#x7684; &lt;code&gt;switch-case&lt;/code&gt; &amp;#x4F86;&amp;#x505A;&amp;#x5224;&amp;#x65B7;&amp;#x3002;&amp;#x4E0D;&amp;#x50C5;&amp;#x96E3;&amp;#x95B1;&amp;#x8B80;&amp;#xFF0C;&amp;#x4E5F;&amp;#x96E3;&amp;#x4EE5;&amp;#x7DAD;&amp;#x8B77;&amp;#x3002;&lt;/p&gt;
&lt;p&gt;&amp;#x56E0;&amp;#x6B64; &lt;code&gt;Bastian Koppelmann&lt;/code&gt; &amp;#x5C31;&amp;#x63D0;&amp;#x51FA;&amp;#x4E86; &lt;code&gt;Decodetree&lt;/code&gt; &amp;#x7684;&amp;#x6A5F;&amp;#x5236;&amp;#xFF0C;&amp;#x958B;&amp;#x767C;&amp;#x8005;&amp;#x53EA;&amp;#x9700;&amp;#x8981;&amp;#x900F;&amp;#x904E; &lt;code&gt;Decodetree&lt;/code&gt; &amp;#x7684;&amp;#x8A9E;&amp;#x6CD5;&amp;#x5B9A;&amp;#x7FA9;&amp;#x5404;&amp;#x500B;&amp;#x6307;&amp;#x4EE4;&amp;#x7684;&amp;#x683C;&amp;#x5F0F;&amp;#xFF0C;&amp;#x4FBF;&amp;#x53EF;&amp;#x4EA4;&amp;#x7531; &lt;code&gt;Decodetree&lt;/code&gt; &amp;#x4F86;&amp;#x52D5;&amp;#x614B;&amp;#x751F;&amp;#x6210;&amp;#x5C0D;&amp;#x61C9;&amp;#x5305;&amp;#x542B; &lt;code&gt;switch-case&lt;/code&gt; &amp;#x7684; instruction decoder &lt;code&gt;.c&lt;/code&gt; &amp;#x6A94;&amp;#x3002;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="QEMU" scheme="https://0xc0de.tw/categories/QEMU/"/>
    
      <category term="RISC-V" scheme="https://0xc0de.tw/categories/QEMU/RISC-V/"/>
    
    
      <category term="QEMU" scheme="https://0xc0de.tw/tags/QEMU/"/>
    
      <category term="RISC-V" scheme="https://0xc0de.tw/tags/RISC-V/"/>
    
  </entry>
  
  <entry>
    <title>Linux Kernel: ARRAY_SIZE()</title>
    <link href="https://0xc0de.tw/Linux-Kernel-ARRAY-SIZE/"/>
    <id>https://0xc0de.tw/Linux-Kernel-ARRAY-SIZE/</id>
    <published>2012-10-15T03:37:40.000Z</published>
    <updated>2020-04-28T14:49:48.167Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>&#x901A;&#x5E38;&#x6211;&#x5011;&#x5728; C &#x8A9E;&#x8A00;&#x4E2D;&#x53D6;&#x5F97;&#x9663;&#x5217;&#x7684;&#x5143;&#x6578;&#x500B;&#x6578;&#x53EF;&#x4EE5;&#x900F;&#x904E;&#x4E0B;&#x5217;&#x7684;&#x65B9;&#x5F0F;&#x4F86;&#x8A08;&#x7B97;&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARRAY_SIZE(arr)&#xA0;(sizeof(arr) / sizeof((arr)[0]))</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> arr[<span class="hljs-number">10</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> arr_size = ARRAY_SIZE(arr);</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x4F46;&#x5982;&#x540C; Jserv &#x5927;&#x5927;&#x5728; <a href="http://blog.linux.org.tw/~jserv/archives/001888.html" target="_blank" rel="noopener">&#x9019;&#x7BC7;&#x6587;&#x7AE0;</a> &#x4E2D;&#x6240;&#x63D0;&#x5230;&#xFF1A;<strong>ARRAY_SIZE()</strong> &#x9019;&#x6A23;&#x7684; macro &#x5176;&#x5BE6;&#x662F;&#x9677;&#x9631;&#x91CD;&#x91CD;&#x2026;</p><a id="more"></a><p>&#x56E0;&#x70BA; macro &#x672C;&#x8EAB;&#x6C92;&#x8FA6;&#x6CD5;&#x505A;&#x578B;&#x614B;&#x6AA2;&#x67E5;&#xFF0C;&#x53EA;&#x662F;&#x55AE;&#x7D14;&#x7684;&#x5C07;&#x503C;&#x5E36;&#x5165;&#x4E26;&#x5C55;&#x958B;&#xFF0C;&#x800C;&#x5728; C &#x4E2D;&#x6211;&#x5011;&#x5E38;&#x5E38;&#x6703;&#x5C07;&#x6307;&#x6A19;&#x548C;&#x9663;&#x5217;&#x6DF7;&#x8457;&#x4F7F;&#x7528;&#x3002;&#x56E0;&#x6B64;&#x82E5;&#x662F;&#x6211;&#x5011;&#x5C07;&#x6307;&#x5411;&#x8A72;&#x9663;&#x5217;&#x7684;&#x6307;&#x6A19;&#x50B3;&#x5165;&#xFF0C;&#x5C31;&#x6703;&#x5F97;&#x5230;&#x932F;&#x8AA4;&#x7684;&#x8A08;&#x7B97;&#x7D50;&#x679C;&#x3002;</p><p>&#x5982;&#x4E0B;&#x9762;&#x7684;&#x7A0B;&#x5F0F;&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> &amp;lt;stdio.h&amp;gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARRAY_SIZE(arr)     (sizeof(arr) / sizeof(arr[0]))</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">        <span class="hljs-keyword">int</span> a[<span class="hljs-number">10</span>];</span><br><span class="line">        <span class="hljs-keyword">int</span> *a_ptr = a;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ARRAY_SIZE(a));</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ARRAY_SIZE(a_ptr));</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x82E5;&#x50B3;&#x5165;&#x9663;&#x5217; <em>a</em>&#xFF0C;&#x5247;&#x7D50;&#x679C;&#x6703;&#x6B63;&#x78BA;&#x986F;&#x793A; size &#x5927;&#x5C0F;&#x70BA; <strong>10</strong>&#xFF0C;&#x4F46;&#x82E5;&#x50B3;&#x5165;&#x7684;&#x662F;&#x6307;&#x5411;&#x9663;&#x5217; <em>a</em> &#x7684;&#x6307;&#x6A19; <em>a_ptr</em>&#xFF0C;&#x5247;&#x56E0;&#x70BA;&#x6307;&#x6A19;&#x7684;&#x5728; 32 &#x4F4D;&#x5143;&#x4F5C;&#x696D;&#x7CFB;&#x7D71;&#x4E0A;&#x5927;&#x5C0F;&#x70BA; <strong>4 bytes</strong> (4 / 4) &#x7684;&#x7D50;&#x679C;&#x5247;&#x6703;&#x8B8A;&#x6210; <strong>1</strong>&#xFF0C;&#x800C;&#x4E26;&#x4E0D;&#x662F;&#x6211;&#x5011;&#x6240;&#x8981;&#x7684;&#x7B54;&#x6848; <strong>10</strong>&#x3002;</p><p>&#x7576;&#x7136;&#x53EA;&#x8981;&#x6211;&#x5011;&#x5C0F;&#x5FC3;&#x4F7F;&#x7528;&#xFF0C;&#x9019;&#x6A23;&#x7684;&#x554F;&#x984C;&#x5176;&#x5BE6;&#x662F;&#x53EF;&#x4EE5;&#x907F;&#x514D;&#x7684;&#x3002;&#x4F46;&#x6211;&#x5011;&#x5E38;&#x5E38;&#x6709;&#x53EF;&#x80FD;&#x6703;&#x5C07;&#x9663;&#x5217;&#x900F;&#x904E;&#x6307;&#x6A19;&#x7684;&#x65B9;&#x5F0F;&#x50B3;&#x5165;&#x67D0;&#x500B; function &#x4E2D;&#xFF0C;&#x9019;&#x6A23;&#x7684;&#x60C5;&#x6CC1;&#x4E0B;&#x6211;&#x5011;&#x5C31;&#x6709;&#x53EF;&#x80FD;&#x6703;&#x5C07;&#x6307;&#x6A19;&#x8AA4;&#x7528;&#x6210;&#x9663;&#x5217;&#x50B3;&#x5165; <strong>ARRAY_SIZE()</strong> &#x800C;&#x5F97;&#x5230;&#x932F;&#x8AA4;&#x7684;&#x7D50;&#x679C;&#x3002;&#x7576;&#x7A0B;&#x5F0F;&#x6210;&#x9577;&#x5230;&#x4E00;&#x5B9A;&#x7684;&#x8907;&#x96DC;&#x5EA6;&#x5F8C;&#xFF0C;&#x985E;&#x4F3C;&#x7684;bug&#x5C31;&#x5F88;&#x6709;&#x53EF;&#x80FD;&#x88AB;&#x5FFD;&#x7565;&#x3002;</p><p>&#x56E0;&#x6B64; Linux &#x5728;&#x5B9A;&#x7FA9; <strong>ARRAY_SIZE()</strong> &#x6642;&#x9664;&#x4E86;&#x900F;&#x904E;&#x4E0A;&#x8FF0;&#x7684;&#x65B9;&#x5F0F;&#x4F86;&#x53D6;&#x5F97;&#x9663;&#x5217;&#x5143;&#x6578;&#x500B;&#x6578;&#x5916;&#xFF0C;&#x9084;&#x53E6;&#x5916;&#x52A0;&#x4E0A;&#x4E86;<strong>&#x578B;&#x614B;&#x6AA2;&#x67E5;</strong>&#xFF0C;&#x4EE5;&#x78BA;&#x4FDD;&#x4F7F;&#x7528;&#x8005;&#x6240;&#x50B3;&#x5165;&#x7684;&#x53C3;&#x6578;&#x5FC5;&#x9808;&#x70BA;&#x9663;&#x5217;&#x800C;&#x975E;&#x6307;&#x6A19; (Linux&#x4E2D;&#x7684; <strong>ARRAY_SIZE()</strong> &#x662F;&#x88AB;&#x5B9A;&#x7FA9;&#x5728;&#xFF1A;<em>include/linux/kernel.h</em>)&#xFF0C;&#x5176;&#x5B9A;&#x7FA9;&#x5982;&#x4E0B;&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]) + __must_be_array(arr))</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x5176;&#x4E2D;&#x5728;&#x6700;&#x5C3E;&#x7AEF;&#x984D;&#x5916;&#x52A0;&#x4E86; <strong>__must_be_array()</strong> &#x7684;&#x56DE;&#x50B3;&#x503C;&#x3002;<strong>__must_be_array()</strong> &#x9019;&#x500B; macro &#x662F;&#x7528;&#x4F86;&#x5224;&#x65B7;&#x6240;&#x50B3;&#x5165;&#x7684;&#x53C3;&#x6578;&#x662F;&#x5426;&#x70BA;&#x4E00;&#x9663;&#x5217; (&#x5B9A;&#x7FA9;&#x5728;&#xFF1A;<em>include/linux/compiler-gcc.h</em>)&#xFF0C;&#x5176;&#x5B9A;&#x7FA9;&#x5982;&#x4E0B;&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* &amp;a[0] degrades to a pointer: a different type from an array */</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __must_be_array(a) BUILD_BUG_ON_ZERO(__same_type((a), &amp;(a)[0]))</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x5728;&#x9019;&#x908A; <strong>__must_be_array()</strong> &#x5C0D;&#x6240;&#x50B3;&#x5165;&#x7684;&#x53C3;&#x6578; <strong>a</strong> &#x505A;&#x4E86;&#x4E00;&#x6B21;<strong>&#x964D;&#x7D1A; (degrade)</strong>&#xFF0C;&#x4E26;&#x5C07;&#x5176;&#x7576;&#x4F5C;&#x7B2C;&#x4E8C;&#x500B;&#x53C3;&#x6578;&#x50B3;&#x5165; <strong>__same_type()</strong> &#x9019;&#x500B; macro&#x3002;&#x5728;&#x9019;&#x908A;&#x505A;&#x964D;&#x7D1A;&#x7684;&#x76EE;&#x7684;&#x5C31;&#x662F;&#x70BA;&#x4E86;&#x8B93;<strong>&#x9663;&#x5217;</strong>&#x8F49;&#x6210;&#x4E00;&#x500B;<strong>&#x6307;&#x6A19;</strong>&#xFF0C;&#x4F46;&#x82E5;&#x6240;&#x50B3;&#x5165;&#x7684;&#x53C3;&#x6578; <em>a</em> &#x662F;&#x500B;<strong>&#x4E0D;&#x61C9;&#x50B3;&#x5165;&#x7684;&#x6307;&#x6A19;</strong>&#xFF0C;&#x5247;&#x9019;&#x6A23;&#x7684;&#x964D;&#x7D1A;&#x8F49;&#x63DB;&#x5F8C;&#x7684;&#x7D50;&#x679C;&#x4ECD;&#x6703;&#x662F;<strong>&#x76F8;&#x540C;&#x7684;&#x539F;&#x6307;&#x6A19;</strong>&#x3002;</p><p><strong>__same_type()</strong> &#x7684;&#x56DE;&#x50B3;&#x503C;&#x5247;&#x6703;&#x50B3;&#x5165; <strong>BUILD_BUG_ON_ZERO()</strong><br>(<strong>BUILD_BUG_ON_ZERO()</strong> &#x7684;&#x8AAA;&#x660E;&#x53EF;&#x4EE5;&#x53C3;&#x8003;&#xFF1A;<a href="/Linux-Kernel-BUILD-BUG-ON-ZERO-BUILD-BUG-ON-NULL/" title="BUILD_BUG_ON_ZERO() / BUILD_BUG_ON_NULL()">BUILD_BUG_ON_ZERO() / BUILD_BUG_ON_NULL()</a>)&#x3002;</p><p><strong>__same_type()</strong> &#x7684;&#x5B9A;&#x7FA9;&#x5247;&#x5982;&#x4E0B; (&#x5B9A;&#x7FA9;&#x5728;&#xFF1A;<em>include/linux/compiler.h</em>)&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* Are two types/vars the same type (ignoring qualifiers)? */</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __same_type</span></span><br><span class="line"><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __same_type(a, b) __builtin_types_compatible_p(typeof(a), typeof(b))</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x5728;&#x9019;&#x908A;&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x770B;&#x5230; <strong>__same_type()</strong> &#x547C;&#x53EB;&#x4E86; GCC &#x7684; built-in function&#xFF1A;<strong>__builtin_types_compatible_p()</strong>&#xFF1A;<br>(<strong>__builtin_types_compatible_p()</strong> &#x7684;&#x5B9A;&#x7FA9;&#x53EF;&#x4EE5;&#x53C3;&#x8003; <a href="http://gcc.gnu.org/onlinedocs/gcc-4.7.2/gcc/Other-Builtins.html#Other-Builtins" target="_blank" rel="noopener">GCC manual</a> &#x7684;&#x8AAA;&#x660E;)&#xFF1B;<strong>__builtin_types_compatible_p()</strong> &#x7684;&#x5B9A;&#x7FA9;&#x53EF;&#x4EE5;&#x53C3;&#x8003; <a href="http://gcc.gnu.org/onlinedocs/gcc-4.7.2/gcc/Other-Builtins.html#Other-Builtins" target="_blank" rel="noopener">GCC manual</a> &#x7684;&#x8AAA;&#x660E;</p><blockquote><p>You can use the built-in function __builtin_types_compatible_p to determine whether two types are the same.<br>This built-in function returns 1 if the unqualified versions of the types type1 and type2 (which are types, not expressions) are compatible, 0 otherwise. The result of this built-in function can be used in integer constant expressions.<br>This built-in function ignores top level qualifiers (e.g., const, volatile). For example, int is equivalent to const int.<br>The type int[] and int[5] are compatible. On the other hand, int and char * are not compatible, even if the size of their types, on the particular architecture are the same. Also, the amount of pointer indirection is taken into account when determining similarity. Consequently, short * is not similar to short **. Furthermore, two types that are typedefed are considered compatible if their underlying types are compatible.<br>An enum type is not considered to be compatible with another enum type even if both are compatible with the same integer type; this is what the C standard specifies. For example, enum {foo, bar} is not similar to enum {hot, dog}.<br>You would typically use this function in code whose execution varies depending on the arguments&#x2019; types. For example:</p></blockquote><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> foo(x)                                                  \</span></span><br><span class="line">  ({                                                           \</span><br><span class="line">    typeof (x) tmp = (x);                                       \</span><br><span class="line">    <span class="hljs-keyword">if</span> (__builtin_types_compatible_p (typeof (x), <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>)) \</span><br><span class="line">      tmp = foo_long_double (tmp);                              \</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (__builtin_types_compatible_p (typeof (x), <span class="hljs-keyword">double</span>)) \</span><br><span class="line">      tmp = foo_double (tmp);                                   \</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (__builtin_types_compatible_p (typeof (x), <span class="hljs-keyword">float</span>))  \</span><br><span class="line">      tmp = foo_float (tmp);                                    \</span><br><span class="line">    <span class="hljs-keyword">else</span>                                                        \</span><br><span class="line">      <span class="hljs-built_in">abort</span> ();                                                 \</span><br><span class="line">    tmp;                                                        \</span><br><span class="line">  })</span><br></pre></td></tr></tbody></table></figure><p></p><blockquote><p>Note: This construct is only available for C.</p></blockquote><p>&#x4E5F;&#x5C31;&#x662F;&#x8AAA; <strong>__builtin_types_compatible_p()</strong> &#x6703;&#x6AA2;&#x67E5;&#x6240;&#x50B3;&#x5165;&#x7684;&#x578B;&#x614B;&#xFF1A;<em>type_1</em> &#x548C; <em>type_2</em> &#x662F;&#x5426;&#x76F8;&#x540C;&#xFF1A;</p><ul><li>&#x82E5; <em>type_1</em> &#x548C; <em>type_2</em> &#x7684;&#x578B;&#x614B;&#x76F8;&#x540C;&#xFF0C;&#x5247;&#x6703;&#x56DE;&#x50B3; <strong>1</strong>&#x3002;</li><li>&#x82E5; <em>type_1</em> &#x548C; <em>type_2</em> &#x7684;&#x578B;&#x614B;&#x4E0D;&#x540C;&#xFF0C;&#x5247;&#x6703;&#x56DE;&#x50B3; <strong>0</strong>&#x3002;</li></ul><p>&#x6B64;&#x5916;&#xFF0C;&#x70BA;&#x4E86;&#x53D6;&#x5F97;&#x53C3;&#x6578;&#x7684;&#x578B;&#x614B;&#xFF0C;&#x9019;&#x908A;&#x9084;&#x53E6;&#x5916;&#x7528;&#x5230;&#x4E86;&#x53E6;&#x4E00;&#x500B; GCC &#x7684; extension&#xFF1A;<strong>typeof()</strong>&#x3002;<strong>typeof()</strong> &#x53EF;&#x4EE5;&#x53D6;&#x5F97;&#x6240;&#x50B3;&#x5165;&#x53C3;&#x6578;&#x7684;&#x578B;&#x614B;&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x900F;&#x904E; <strong>typeof()</strong> &#x4F86;&#x5BA3;&#x544A;&#x4E00;&#x500B;&#x8207;&#x6240;&#x50B3;&#x5165;&#x53C3;&#x6578;&#x4E00;&#x6A21;&#x4E00;&#x6A23;&#x7684;&#x65B0;&#x8B8A;&#x6578;&#xFF1A;<br>(<strong>typeof()</strong> &#x7684;&#x5B9A;&#x7FA9;&#x540C;&#x6A23;&#x53EF;&#x4EE5;&#x53C3;&#x8003; <a href="http://gcc.gnu.org/onlinedocs/gcc-4.7.2/gcc/Typeof.html#Typeof" target="_blank" rel="noopener">GCC manual</a> &#x7684;&#x8AAA;&#x660E;)</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> &amp;lt;stdio.h&amp;gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARRAY_SIZE(arr)     (sizeof(arr) / sizeof(arr[0]))</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">        <span class="hljs-keyword">int</span> a[<span class="hljs-number">10</span>];</span><br><span class="line">        typeof(a) b;</span><br><span class="line"> </span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ARRAY_SIZE(a));</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ARRAY_SIZE(b));</span><br><span class="line">       </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x5728;&#x6B64;&#x6211;&#x5011;&#x5BA3;&#x544A;&#x4E00;&#x500B;&#x8207;&#x9663;&#x5217; <em>a</em> &#x578B;&#x614B;&#x4E00;&#x6A21;&#x4E00;&#x6A23;&#x7684;&#x9663;&#x5217; <em>b</em>&#xFF0C;&#x56E0;&#x6B64;&#x900F;&#x904E; <strong>ARRAY_SIZE()</strong> &#x8A08;&#x7B97;&#x9663;&#x5217;&#x5143;&#x6578;&#x500B;&#x6578;&#x7684;&#x7D50;&#x679C;&#x90FD;&#x6703;&#x662F; <strong>10</strong>&#x3002;</p><hr><p>&#x56DE;&#x5230; <strong>__same_type()</strong>&#xFF1A;</p><p>&#x900F;&#x904E; <strong>__builtin_types_compatible_p()</strong> &#x548C; <strong>typeof()</strong>&#xFF0C;&#x6211;&#x5011;&#x5C31;&#x53EF;&#x4EE5;&#x77E5;&#x9053;&#x6240;&#x50B3;&#x5165;&#x7684;&#x5169;&#x500B;&#x53C3;&#x6578;&#x578B;&#x614B;&#x662F;&#x5426;&#x76F8;&#x540C;&#xFF1A;</p><ul><li><p>&#x5982;&#x679C;&#x76F8;&#x540C; (&#x50B3;&#x5165; <strong>ARRAY_SIZE()</strong> &#x7684;&#x53C3;&#x6578;&#x70BA;&#x4E00;&#x4E0D;&#x61C9;&#x50B3;&#x5165;&#x7684;&#x6307;&#x6A19;)&#xFF0C;&#x5247; <strong>__builtin_types_compatible_p()</strong> &#x5C31;&#x6703;&#x56DE;&#x50B3; <strong>1</strong>&#xFF0C;&#x518D;&#x50B3;&#x5165; <strong>BUILD_BUG_ON_ZERO()</strong> &#x5F8C;&#x5C31;&#x6703;&#x9020;&#x6210;&#x7DE8;&#x8B6F;&#x932F;&#x8AA4;&#x3002;</p></li><li><p>&#x4F46;&#x5982;&#x679C;&#x4E0D;&#x540C; (&#x50B3;&#x5165; <strong>ARRAY_SIZE()</strong> &#x7684;&#x53C3;&#x6578;&#x70BA;&#x4E00;&#x6B63;&#x78BA;&#x7684;&#x9663;&#x5217;)&#xFF0C;&#x5247; <strong>__builtin_types_compatible_p()</strong> &#x5C31;&#x6703;&#x56DE;&#x50B3; <strong>0</strong>&#xFF0C;&#x518D;&#x50B3;&#x5165; <strong>BUILD_BUG_ON_ZERO()</strong> &#x5F8C;&#x5F97;&#x5230;&#x7684;&#x7D50;&#x679C;&#x70BA; <strong>0</strong>&#xFF0C;&#x52A0;&#x56DE; <strong>ARRAY_SIZE()</strong> &#x5F8C;&#x4E26;&#x4E0D;&#x6703;&#x5F71;&#x97FF;&#x5176;&#x539F;&#x5148;&#x7D50;&#x679C;&#x3002;</p></li></ul><p>&#x900F;&#x904E;&#x9019;&#x6A23;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x6211;&#x5011;&#x4FBF;&#x53EF;&#x5728; compile-time &#x7684;&#x6642;&#x5019;&#x5C31;&#x767C;&#x73FE;&#x6240;&#x50B3;&#x5165; <strong>ARRAY_SIZE()</strong> &#x7684;&#x53C3;&#x6578;&#x662F;&#x5426;&#x70BA;&#x4E00;&#x932F;&#x8AA4;&#x7684;&#x6307;&#x6A19;&#xFF0C;&#x4E26;&#x53EF;&#x5728;&#x7DE8;&#x8B6F;&#x6642;&#x671F;&#x52A0;&#x4EE5;&#x4FEE;&#x6B63;&#x2026;</p><p>&#x6B64;&#x5916; Jserv &#x5927;&#x5927; <a href="http://blog.linux.org.tw/~jserv/archives/001888.html" target="_blank" rel="noopener">&#x90A3;&#x7BC7;&#x6587;&#x7AE0;</a> &#x4E0B;&#x9762;&#x7684;&#x56DE;&#x61C9;&#x4E5F;&#x6709;&#x4EBA;&#x63D0;&#x51FA;&#x4E86;&#x5176;&#x4ED6;&#x4E0D;&#x540C;&#x7684; <a href="http://heaven.branda.to/~thinker/GinGin_CGI.py/show_id_doc/236" target="_blank" rel="noopener">&#x4F5C;&#x6CD5;</a>&#x3002;&#x96D6;&#x7136;&#x5176;&#x539F;&#x610F;&#x662F;&#x70BA;&#x4E86;&#x8981;&#x907F;&#x514D;&#x4F7F;&#x7528; GCC extension &#x7684;&#xFF0C;&#x4F46;&#x6700;&#x5F8C;&#x767C;&#x73FE;&#x539F;&#x4F86; <strong>typeof()</strong> &#x4E5F;&#x662F;&#x4E00;&#x500B; GCC extension&#xFF0C;&#x4E0D;&#x904E;&#x4F5C;&#x6CD5;&#x540C;&#x6A23;&#x53EF;&#x4EE5;&#x4F5C;&#x70BA;&#x53C3;&#x8003;&#x3002;</p><hr><p>Extra References:</p><ul><li><a href="http://blog.linux.org.tw/~jserv/archives/001876.html" target="_blank" rel="noopener">sizeof &#x5728;&#x8A9E;&#x8A00;&#x5C64;&#x9762;&#x7684;&#x9677;&#x9631;</a></li></ul></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&amp;#x901A;&amp;#x5E38;&amp;#x6211;&amp;#x5011;&amp;#x5728; C &amp;#x8A9E;&amp;#x8A00;&amp;#x4E2D;&amp;#x53D6;&amp;#x5F97;&amp;#x9663;&amp;#x5217;&amp;#x7684;&amp;#x5143;&amp;#x6578;&amp;#x500B;&amp;#x6578;&amp;#x53EF;&amp;#x4EE5;&amp;#x900F;&amp;#x904E;&amp;#x4E0B;&amp;#x5217;&amp;#x7684;&amp;#x65B9;&amp;#x5F0F;&amp;#x4F86;&amp;#x8A08;&amp;#x7B97;&amp;#xFF1A;&lt;/p&gt;
&lt;p&gt;&lt;epacse hidden&gt;0&lt;/epacse&gt;&lt;/p&gt;
&lt;p&gt;&amp;#x4F46;&amp;#x5982;&amp;#x540C; Jserv &amp;#x5927;&amp;#x5927;&amp;#x5728; &lt;a href=&quot;http://blog.linux.org.tw/~jserv/archives/001888.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x9019;&amp;#x7BC7;&amp;#x6587;&amp;#x7AE0;&lt;/a&gt; &amp;#x4E2D;&amp;#x6240;&amp;#x63D0;&amp;#x5230;&amp;#xFF1A;&lt;strong&gt;ARRAY_SIZE()&lt;/strong&gt; &amp;#x9019;&amp;#x6A23;&amp;#x7684; macro &amp;#x5176;&amp;#x5BE6;&amp;#x662F;&amp;#x9677;&amp;#x9631;&amp;#x91CD;&amp;#x91CD;&amp;#x2026;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Linux Kernel" scheme="https://0xc0de.tw/categories/Linux-Kernel/"/>
    
      <category term="Tricks" scheme="https://0xc0de.tw/categories/Linux-Kernel/Tricks/"/>
    
    
      <category term="C" scheme="https://0xc0de.tw/tags/C/"/>
    
      <category term="C++" scheme="https://0xc0de.tw/tags/C/"/>
    
      <category term="Linux Kernel" scheme="https://0xc0de.tw/tags/Linux-Kernel/"/>
    
  </entry>
  
  <entry>
    <title>Linux Kernel: BUILD_BUG_ON_ZERO() / BUILD_BUG_ON_NULL()</title>
    <link href="https://0xc0de.tw/Linux-Kernel-BUILD-BUG-ON-ZERO-BUILD-BUG-ON-NULL/"/>
    <id>https://0xc0de.tw/Linux-Kernel-BUILD-BUG-ON-ZERO-BUILD-BUG-ON-NULL/</id>
    <published>2012-10-15T00:50:00.000Z</published>
    <updated>2020-04-28T14:49:48.147Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>&#x4E4B;&#x524D;&#x5728; trace Linux Kernel source codes &#x6642;&#x767C;&#x73FE;&#x4E86;&#x5169;&#x500B;&#x5F88;&#x7279;&#x5225;&#x7684; macros&#xFF1A;<strong>BUILD_BUG_ON_ZERO()</strong> &#x548C; <strong>BUILD_BUG_ON_NULL()</strong><br>(&#x5B9A;&#x7FA9;&#x5728;&#xFF1A;<em>include/linux/kernel.h</em>)</p><p>&#x5B83;&#x5011;&#x7684;&#x5B9A;&#x7FA9;&#x5982;&#x4E0B;&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* Force a compilation error if condition is true, but also produce a</span></span><br><span class="line"><span class="hljs-comment">   result (of value 0 and type size_t), so the expression can be used</span></span><br><span class="line"><span class="hljs-comment">   e.g. in a structure initializer (or where-ever else comma expressions</span></span><br><span class="line"><span class="hljs-comment">   aren&apos;t permitted). */</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUILD_BUG_ON_ZERO(e) (sizeof(struct { int:-!!(e); }))</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUILD_BUG_ON_NULL(e) ((void *)sizeof(struct { int:-!!(e); }))</span></span><br></pre></td></tr></tbody></table></figure><p></p><a id="more"></a><p>&#x5176;&#x4E2D; <em>e</em> &#x662F;&#x6211;&#x5011;&#x6240;&#x50B3;&#x5165;&#x7684;&#x5224;&#x65B7;&#x5F0F;&#xFF0C;&#x82E5;&#x5224;&#x65B7;&#x5F0F;&#x70BA; <em>true</em>&#xFF0C;&#x5247;&#x6703;&#x9020;&#x6210; compile error&#x3002;&#x5982;&#x6B64;&#x6211;&#x5011;&#x4FBF;&#x53EF;&#x900F;&#x904E;&#x9019;&#x500B; macro &#x4F86;&#x5224;&#x65B7;&#x662F;&#x5426;&#x67D0;&#x4E9B;&#x932F;&#x8AA4;/&#x4E0D;&#x61C9;&#x767C;&#x751F;&#x7684;&#x60C5;&#x6CC1; (&#x5224;&#x65B7;&#x5F0F;) &#x662F;&#x5426;&#x6703;&#x767C;&#x751F;&#xFF0C;&#x82E5;&#x6703;&#x767C;&#x751F;&#x5247;&#x53EF;&#x5728; compile-time &#x7684;&#x6642;&#x5019;&#x5C31;&#x986F;&#x793A;&#x932F;&#x8AA4;&#x8A0A;&#x606F;&#x3002;</p><p>&#x4E00;&#x958B;&#x59CB;&#x770B;&#x4E0D;&#x592A;&#x61C2;&#x9019;&#x500B; macro &#x7684;&#x610F;&#x7FA9;&#xFF0C;&#x4E0A;&#x7DB2;&#x67E5;&#x4E86;&#x8CC7;&#x6599;&#x5F8C;&#x767C;&#x73FE;&#x5728; Stackoverflow &#x4E0A;&#x6709;&#x4EBA;&#x505A;&#x4E86;&#x5F88;&#x8A73;&#x7D30;&#x7684;&#x89E3;&#x91CB;&#xFF1A;<a href="http://stackoverflow.com/questions/9229601/what-is-in-c-code" target="_blank" rel="noopener">What is &#x300C;:-!!&#x300D; in C code?</a></p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">sizeof</span>(struct { <span class="hljs-keyword">int</span>:-!!(e); })</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x5982;&#x540C; Stackoverflow &#x4E0A;&#x6240;&#x89E3;&#x91CB;&#xFF0C;&#x9019;&#x6BB5; codes &#x53EF;&#x4EE5;&#x62C6;&#x6210;&#x4E0B;&#x9762;&#x5E7E;&#x500B;&#x7247;&#x6BB5;&#x4F86;&#x5206;&#x6790;&#xFF1A;</p><ul><li><p><strong>!!(e)</strong></p><p>  &#x5C07;&#x6240;&#x50B3;&#x5165;&#x7684; <em>e</em> &#x505A;&#x5169;&#x6B21; negative&#xFF0C;&#x5982;&#x6B64;&#x53EF;&#x4EE5;&#x78BA;&#x4FDD;&#x53EA;&#x8981; <em>e</em> &#x4E0D;&#x70BA; 0 &#x7D50;&#x679C;&#x4E00;&#x5B9A;&#x70BA; 1&#xFF0C;<em>e</em> &#x70BA; 0 &#x7D50;&#x679C;&#x4ECD;&#x70BA; 0&#x3002;</p></li><li><p><strong>-!!(e)</strong></p><p>  &#x5C07;&#x525B;&#x525B;&#x7684;&#x7D50;&#x679C;&#x4E58;&#x4E0A; (-1)&#xFF0C;&#x56E0;&#x6B64;&#x53EA;&#x8981; <em>e</em> &#x4E0D;&#x70BA; 0 &#x7D50;&#x679C;&#x5C31;&#x6703;&#x662F; -1&#xFF0C;<em>e</em> &#x70BA; 0 &#x7D50;&#x679C;&#x4ECD;&#x70BA; 0&#x3002;</p></li><li><p><strong>struct { int:-1!!(e) }</strong></p><p>  &#x5BA3;&#x544A;&#x4E00;&#x500B; structure&#xFF0C;&#x5305;&#x542B;&#x4E00;&#x500B; int&#xFF0C;&#x9019;&#x908A;&#x7528;&#x5230;&#x4E86; C &#x8A9E;&#x8A00; bit-fields&#x7684;&#x6280;&#x5DE7;&#x3002;<br>  &#x6839;&#x64DA;<a href="http://en.wikipedia.org/wiki/Bit_field" target="_blank" rel="noopener">&#x7DAD;&#x57FA;&#x767E;&#x79D1; bit-fields</a> &#x7684;&#x5B9A;&#x7FA9;&#xFF1A;</p><blockquote><p>A bit field is a common idiom used in computer programming to compactly store multiple logical values as a short series of bits where each of the single bits can be addressed separately.</p></blockquote><p>  &#x4E5F;&#x5C31;&#x662F;&#x8AAA;&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x5C07;&#x8CC7;&#x6599;&#x4EE5; bit &#x7684;&#x5F62;&#x5F0F;&#x5132;&#x5B58;&#x5728;&#x67D0;&#x4E00;&#x500B;&#x8CC7;&#x6599;&#x578B;&#x614B;&#x4E2D;&#xFF0C;&#x8209;&#x4F8B;&#x4F86;&#x8AAA;&#xFF1A;</p><p>  </p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> {</span></span><br><span class="line">        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> a : <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> b : <span class="hljs-number">3</span>;</span><br><span class="line">        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> c : <span class="hljs-number">2</span>;</span><br><span class="line">} flags;</span><br></pre></td></tr></tbody></table></figure><p></p><p>  &#x5C31;&#x5BA3;&#x544A;&#x4E86; 3 &#x500B; bit-fields&#xFF1A;<em>a</em>, <em>b</em>, <em>c</em>&#x3002;&#x9019; 3 &#x500B; bit-fields &#x6703;&#x5305;&#x5728;&#x540C;&#x4E00;&#x500B; <em>unsigned char</em> &#x8CC7;&#x6599;&#x578B;&#x614B; (8-bits) &#x4E2D;&#xFF0C;&#x5176;&#x4E2D; <em>a</em> &#x4F54;&#x4E86; 1 &#x500B;bit&#xFF0C;<em>b</em> &#x4F54;&#x4E86; 3 &#x500B; bits&#xFF0C;<em>c</em> &#x4F54;&#x4E86; 2 &#x500B; bits&#xFF0C;&#x4F46;&#x6574;&#x500B; flags structure &#x9084;&#x662F;&#x6703;&#x4F54; 8 &#x500B; bits (1 byte)&#xFF0C;&#x5373;&#x4F7F; bit-fields &#x4E26;&#x6C92;&#x6709;&#x4F54;&#x6EFF;&#x6574;&#x500B; 8 bits &#x7A7A;&#x9593;&#x3002;</p><p>  &#x6B64;&#x5916;&#xFF0C;bit-fields &#x662F;&#x7121;&#x6CD5;&#x4F7F;&#x7528; <strong>sizeof()</strong> &#x53D6;&#x5F97;&#x5176; size &#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x4EE5;&#x4E0B;&#x7684; codes &#x5C07;&#x6703;&#x7522;&#x751F;&#xFF1A;<strong>error: &#x2018;sizeof&#x2019; applied to a bit-field</strong> &#x7684;&#x932F;&#x8AA4;&#x8A0A;&#x606F;&#xFF1A;</p><p>  </p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(flags.a));</span><br></pre></td></tr></tbody></table></figure><p></p><hr><p>  &#x56DE;&#x5230;&#x539F;&#x672C;&#x7684; <strong>struct { int:-1!!(e) }</strong>&#xFF0C;&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x5F97;&#x77E5;&#xFF1A;</p><p>  &#x82E5; <em>e</em> &#x4E0D;&#x70BA; 0&#xFF0C;&#x5247; <strong>struct { int:-!!(e); }</strong> &#x6703;&#x5C55;&#x958B;&#x6210;&#xFF1A;<strong>struct { int:-1; }</strong>&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x6703;&#x5BA3;&#x544A;&#x4E00;&#x500B; structure&#xFF0C;&#x5305;&#x542B; 1 &#x500B;&#x4F54; int (32 bits) &#x4E2D;&#xFF0C;<strong>-1</strong> &#x500B; bits &#x7684; anonymous bit-field&#x3002;&#x7576;&#x7136;&#xFF0C;&#x7D55;&#x5C0D;&#x4E0D;&#x6703;&#x6709;&#x4F54; <strong>-1</strong> &#x500B; bits &#x7684; bit-field &#x5B58;&#x5728;&#xFF0C;&#x56E0;&#x6B64;&#x9019;&#x6A23;&#x6703;&#x5C0E;&#x81F4;&#x5728;&#x7DE8;&#x8B6F;&#x6642;&#x7522;&#x751F;&#xFF1A;<strong>error: negative width in bit-field &#x2018;<anonymous>&#x2018;</anonymous></strong> &#x7684;&#x932F;&#x8AA4;&#x8A0A;&#x606F;&#x3002;</p><p>  &#x82E5; <em>e</em> &#x70BA; 0&#xFF0C;&#x5247; <strong>struct { int:-1!!(e); }</strong> &#x6703;&#x5C55;&#x958B;&#x6210;&#xFF1A;<strong>struct { int:0; }</strong>&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x5BA3;&#x544A;&#x4E00;&#x500B; structure&#xFF0C;&#x5305;&#x542B; 1 &#x500B;&#x4F54; int (32 bits) &#x4E2D;&#xFF0C;<strong>0</strong> &#x500B; bits &#x7684; anonymous bit-field&#x3002;<strong>0</strong> &#x500B; bits &#x7684; bit-field &#x4E26;&#x4E0D;&#x6703;&#x9020;&#x6210;&#x7DE8;&#x8B6F;&#x51FA;&#x932F;&#xFF0C;&#x4E8B;&#x5BE6;&#x4E0A;&#xFF0C;&#x5BA3;&#x544A;&#x6210; <strong>0</strong> &#x500B; bits &#x7684; bit-field &#x901A;&#x5E38;&#x662F;&#x7528;&#x4F86;&#x5C07;&#x8CC7;&#x6599;&#x5F37;&#x5236;&#x5C0D;&#x9F4A;&#x81F3;&#x4E0B;&#x4E00;&#x500B;word&#x908A;&#x754C; (force alignment at the next word boundary)&#xFF0C;&#x800C;&#x4E14;<strong>&#x4E0D;&#x6703;&#x4F54;&#x4EFB;&#x4F55;&#x7684;&#x7A7A;&#x9593;!!</strong>&#x3002;</p></li></ul><p>&#x900F;&#x904E;&#x9019;&#x6A23;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x53EA;&#x8981;&#x50B3;&#x5165; <strong><em>BUILD_BUG_ON_ZERO(e)</em></strong> &#x7684; <em>e</em> &#x4E0D;&#x70BA; 0&#xFF0C;&#x5176;&#x5C31;&#x6703;&#x9020;&#x6210; <strong>&#x7DE8;&#x8B6F;&#x51FA;&#x932F;</strong>&#x3002;</p><p>&#x82E5;&#x50B3;&#x5165; <strong>BUILD_BUG_ON_ZERO(e)</strong> &#x7684; <em>e</em> &#x70BA; 0&#xFF0C;&#x5247;&#x53EA;&#x6703;&#x5BA3;&#x544A;&#x4E00;&#x500B; &#x4E0D;&#x4F54;&#x4EFB;&#x4F55;&#x7A7A;&#x9593;&#x7684; structure&#x3002;&#x7D93;&#x904E; <strong>sizeof()</strong> &#x8A08;&#x7B97;&#x5F8C;&#x56DE;&#x50B3; <strong>0</strong> &#x7684;&#x503C;&#x3002;</p><p>&#x540C;&#x6A23;&#x7684; <strong>BUILD_BUG_ON_NULL()</strong> &#x5247;&#x662F;&#x5C07;&#x4E0A;&#x8FF0;&#x7684;&#x7D50;&#x679C;&#x8F49;&#x6210; <strong>void</strong>&#xFF0C;&#x56E0;&#x6B64;&#x53EA;&#x8981;&#x50B3;&#x5165; <strong>BUILD_BUG_ON_NULL(e)</strong> &#x7684; <em>e</em> <strong>&#x4E0D;&#x70BA;NULL</strong>&#xFF0C;&#x5176;&#x5C31;&#x6703;&#x9020;&#x6210; <strong>&#x7DE8;&#x8B6F;&#x51FA;&#x932F;</strong>&#x3002;</p><p>&#x82E5;&#x50B3;&#x5165; <strong>BUILD_BUG_ON_NULL(e)</strong> &#x7684; <strong><em>e &#x70BA; NULL</em></strong>&#xFF0C;&#x5247;&#x53EA;&#x6703;&#x5BA3;&#x544A;&#x4E00;&#x500B; <strong>&#x4E0D;&#x4F54;&#x4EFB;&#x4F55;&#x7A7A;&#x9593;&#x7684; structure</strong>&#x3002;&#x7D93;&#x904E; <strong>sizeof()</strong> &#x8A08;&#x7B97;&#x5F8C;&#x4ECD;&#x70BA; <strong>0</strong>&#xFF0C;&#x518D;&#x8F49;&#x6210;&#x4E00;&#x500B;<strong>&#x6307;&#x5411;&#x4F4D;&#x5740; 0 &#x7684; void</strong>&#x3002;</p><p>&#x800C; Stackoverflow &#x4E0A;&#x7684;&#x56DE;&#x7B54;&#x4E5F;&#x6709;&#x63D0;&#x5230;&#xFF0C;&#x70BA;&#x4F55;&#x4E0D;&#x76F4;&#x63A5;&#x4F7F;&#x7528; <strong>assert()</strong> &#x5C31;&#x597D;&#x4E86;&#xFF1F;&#x5176;&#x7B54;&#x6848;&#x4E5F;&#x5F88;&#x6E05;&#x695A;&#xFF1A;</p><blockquote><p><strong>These macros implement a compile-time test, while assert() is a run-time test.</strong></p></blockquote><p>&#x4E5F;&#x5C31;&#x662F;&#x8AAA;&#x9019;&#x6A23;&#x7684;&#x6A5F;&#x5236;&#x662F;&#x53EF;&#x4EE5;&#x5728; compile-time &#x7684;&#x6642;&#x5019;&#x5C31;&#x767C;&#x73FE;&#x554F;&#x984C;&#xFF0C;&#x800C; <strong>assert()</strong> &#x5247;&#x5FC5;&#x9808;&#x7B49;&#x5230; run-time &#x7684;&#x6642;&#x5019;&#x624D;&#x80FD;&#x767C;&#x73FE;&#x554F;&#x984C;&#x3002;&#x4E0D;&#x904E;&#x4E5F;&#x5C31;&#x662F;&#x56E0;&#x70BA; <strong>BUILD_BUG_ON_ZERO()</strong> &#x548C; <strong>BUILD_BUG_ON_NULL()</strong> &#x53EA;&#x80FD;&#x4F7F;&#x7528;&#x5728; compile-time &#x5C31;&#x53EF;&#x4EE5;&#x627E;&#x5230; bug &#x7684;&#x60C5;&#x6CC1;&#x4E0B;&#xFF0C;&#x56E0;&#x6B64;&#x82E5;&#x662F;&#x5224;&#x65B7;&#x5F0F;&#x4E2D;&#x6709;&#x4EFB;&#x4F55;&#x5FC5;&#x9808;&#x7B49;&#x5230; run-time &#x624D;&#x80FD;&#x5F97;&#x77E5;&#x7684;&#x7D50;&#x679C;&#xFF0C;&#x5C31;&#x6703;&#x9020;&#x6210;&#x932F;&#x8AA4;&#xFF1A;</p><p></p><figure class="highlight c hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> &amp;lt;stdio.h&amp;gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUILD_BUG_ON_ZERO(e)    (sizeof(struct { int:-!!(e); }))</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">        <span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>;</span><br><span class="line"> </span><br><span class="line">        BUILD_BUG_ON_ZERO(a == <span class="hljs-number">2</span>);</span><br><span class="line">        BUILD_BUG_ON_ZERO(<span class="hljs-number">2</span> == <span class="hljs-number">2</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>&#x7B2C;&#x4E00;&#x6B21;&#x547C;&#x53EB; <strong>BUILD_BUG_ON_ZERO()</strong> &#x7531;&#x65BC;&#x50B3;&#x5165;&#x7684;&#x5224;&#x65B7;&#x5F0F;&#x4E2D;&#x5305;&#x542B; run-time &#x624D;&#x6703;&#x5F97;&#x77E5;&#x5176;&#x503C;&#x7684; <em>a</em>&#xFF0C;&#x56E0;&#x6B64;&#x6703;&#x9020;&#x6210; compiler &#x932F;&#x8AA4;&#x7684;&#x5224;&#x65B7;&#xFF0C;&#x7522;&#x751F;&#x932F;&#x8AA4;&#x8A0A;&#x606F;&#xFF1A;<strong>error: bit-field &#x2018;<anonymous>&#x2018; width not an integer constant</anonymous></strong>&#x3002;&#x4F46;&#x7B2C;&#x4E8C;&#x6B21;&#x547C;&#x53EB; <strong>BUILD_BUG_ON_ZERO()</strong> &#x7531;&#x65BC;&#x5224;&#x65B7;&#x5F0F;&#x5C55;&#x958B;&#x5F8C;&#x7686;&#x53EF;&#x5728; compile-time &#x7684;&#x6642;&#x5019;&#x5F97;&#x77E5;&#x5176;&#x7D50;&#x679C;&#xFF0C;&#x56E0;&#x6B64;&#x5C31;&#x4E0D;&#x6703;&#x7522;&#x751F;&#x932F;&#x8AA4;&#x8A0A;&#x606F;&#x3002;</p><p>&#x6240;&#x4EE5;&#x5728;&#x4F7F;&#x7528; <strong>BUILD_BUG_ON_ZERO()</strong> &#x6216;&#x662F; <strong>BUILD_BUG_ON_NULL()</strong> &#x7684;&#x6642;&#x5019;&#x9084;&#x662F;&#x8981;&#x6CE8;&#x610F;&#x5176;&#x4F7F;&#x7528;&#x6642;&#x6A5F;&#x2026;..</p><hr><p>&#x4E0D;&#x5F97;&#x4E0D;&#x8AAA;Linux&#x5167;&#x7528;&#x4E86;&#x8A31;&#x591A;&#x975E;&#x5E38;&#x6F02;&#x4EAE;&#x7684;&#x6280;&#x5DE7;&#x2026; &#x4E0D;&#x4F46;&#x53EF;&#x4EE5;&#x5728; compile-time &#x7684;&#x6642;&#x5019;&#x5C31;&#x5C07;&#x932F;&#x8AA4;&#x986F;&#x793A;&#x51FA;&#x4F86;&#xFF0C;&#x82E5;&#x5224;&#x65B7;&#x5F0F; (&#x932F;&#x8AA4;/&#x4E0D;&#x61C9;&#x767C;&#x751F;&#x7684;&#x60C5;&#x6CC1;) &#x4E0D;&#x6210;&#x7ACB;&#x4EA6;&#x4E0D;&#x6703;&#x9020;&#x6210;&#x4EFB;&#x4F55;&#x7A7A;&#x9593;&#x7684;&#x6D6A;&#x8CBB;!!<br>(<strong>BUILD_BUG_ON_ZERO()</strong> &#x7684;&#x5BE6;&#x969B;&#x7528;&#x6CD5;&#x53EF;&#x4EE5;&#x53C3;&#x8003; <a href="/Linux-Kernel-ARRAY-SIZE/" title="Linux Kernel: ARRAY_SIZE()">Linux Kernel: ARRAY_SIZE()</a> &#x4E00;&#x6587;)</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&amp;#x4E4B;&amp;#x524D;&amp;#x5728; trace Linux Kernel source codes &amp;#x6642;&amp;#x767C;&amp;#x73FE;&amp;#x4E86;&amp;#x5169;&amp;#x500B;&amp;#x5F88;&amp;#x7279;&amp;#x5225;&amp;#x7684; macros&amp;#xFF1A;&lt;strong&gt;BUILD_BUG_ON_ZERO()&lt;/strong&gt; &amp;#x548C; &lt;strong&gt;BUILD_BUG_ON_NULL()&lt;/strong&gt;&lt;br&gt;(&amp;#x5B9A;&amp;#x7FA9;&amp;#x5728;&amp;#xFF1A;&lt;em&gt;include/linux/kernel.h&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;&amp;#x5B83;&amp;#x5011;&amp;#x7684;&amp;#x5B9A;&amp;#x7FA9;&amp;#x5982;&amp;#x4E0B;&amp;#xFF1A;&lt;/p&gt;
&lt;p&gt;&lt;epacse hidden&gt;7&lt;/epacse&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Linux Kernel" scheme="https://0xc0de.tw/categories/Linux-Kernel/"/>
    
      <category term="Tricks" scheme="https://0xc0de.tw/categories/Linux-Kernel/Tricks/"/>
    
    
      <category term="C" scheme="https://0xc0de.tw/tags/C/"/>
    
      <category term="C++" scheme="https://0xc0de.tw/tags/C/"/>
    
      <category term="Linux Kernel" scheme="https://0xc0de.tw/tags/Linux-Kernel/"/>
    
  </entry>
  
</feed>
